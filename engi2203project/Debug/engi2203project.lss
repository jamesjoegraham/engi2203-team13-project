
engi2203project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000053a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080013c  0080013c  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e2  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b56  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f1  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000243  00000000  00000000  00003537  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000377a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 28 01 	call	0x250	; 0x250 <main>
  9e:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initKeypad>:

int pindex = 0;

void initKeypad(void)
{
	ROWPORT &= ~(1<<ROW1) & ~(1<<ROW2) & ~(1<<ROW3) & ~(1<<ROW4); //Set Row Ports low
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	85 b9       	out	0x05, r24	; 5
	COLPORT |= (1<<COL1) | (1<<COL2) | (1<<COL3); //Sets Column Ports high
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 6e       	ori	r24, 0xE0	; 224
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <setRowLow>:
}

void setRowLow(int row)
{
  b4:	9c 01       	movw	r18, r24
	ROWDDR &=  ~(1<<ROW1) & ~(1<<ROW2) & ~(1<<ROW3) & ~(1<<ROW4); // Sets all Rows to Input
  b6:	94 b1       	in	r25, 0x04	; 4
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	94 b9       	out	0x04, r25	; 4
		
	if(row == 0)
  bc:	21 15       	cp	r18, r1
  be:	31 05       	cpc	r19, r1
  c0:	11 f4       	brne	.+4      	; 0xc6 <setRowLow+0x12>
	{
		ROWDDR |= (1<<ROW1); // Sets Row 1 to Output
  c2:	23 9a       	sbi	0x04, 3	; 4
  c4:	08 95       	ret
	}else if(row == 1)
  c6:	21 30       	cpi	r18, 0x01	; 1
  c8:	31 05       	cpc	r19, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <setRowLow+0x1c>
	{
		ROWDDR |= (1<<ROW2); // Sets Row 2 to Output
  cc:	22 9a       	sbi	0x04, 2	; 4
  ce:	08 95       	ret
	}else if(row == 2)
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	11 f4       	brne	.+4      	; 0xda <setRowLow+0x26>
	{
		ROWDDR |= (1<<ROW3); // Sets Row 3 to Output
  d6:	21 9a       	sbi	0x04, 1	; 4
  d8:	08 95       	ret
	}else
	{
		ROWDDR |= (1<<ROW4); // Sets Row 4 to Output
  da:	20 9a       	sbi	0x04, 0	; 4
  dc:	08 95       	ret

000000de <colPushed>:
	}
}

int colPushed(void)
{
	if((COLPIN & (1<<COL1)) == 0) //Checks if Column 1 is low
  de:	4f 9b       	sbis	0x09, 7	; 9
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <colPushed+0x12>
	{
		return 1;
	}
	else if((COLPIN & (1<<COL2)) == 0) //Checks if Column 2 is low
  e2:	4e 9b       	sbis	0x09, 6	; 9
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <colPushed+0x18>
	{
		return 2;
	}
	else if((COLPIN & (1<<COL3)) == 0) //Checks if Column 3 is low
  e6:	4d 9b       	sbis	0x09, 5	; 9
  e8:	09 c0       	rjmp	.+18     	; 0xfc <colPushed+0x1e>
	{
		return 3;
	}
	
	
	return 0; //returns nothing if no col detected
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

int colPushed(void)
{
	if((COLPIN & (1<<COL1)) == 0) //Checks if Column 1 is low
	{
		return 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret
	}
	else if((COLPIN & (1<<COL2)) == 0) //Checks if Column 2 is low
	{
		return 2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
	}
	else if((COLPIN & (1<<COL3)) == 0) //Checks if Column 3 is low
	{
		return 3;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return 0; //returns nothing if no col detected
}
 100:	08 95       	ret

00000102 <getKeypress>:

char getKeypress(void)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
	for(int row = 0; row < 4; row++){
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
		setRowLow(row);
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <setRowLow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <getKeypress+0x12>
 118:	00 c0       	rjmp	.+0      	; 0x11a <getKeypress+0x18>
 11a:	00 00       	nop
		_delay_ms(20);
		
		int col = colPushed();
 11c:	0e 94 6f 00 	call	0xde	; 0xde <colPushed>
		
		if(col){
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	59 f0       	breq	.+22     	; 0x13a <getKeypress+0x38>
			return buttons[row][col-1];
 124:	9e 01       	movw	r18, r28
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	c2 0f       	add	r28, r18
 12c:	d3 1f       	adc	r29, r19
 12e:	c8 0f       	add	r28, r24
 130:	d9 1f       	adc	r29, r25
 132:	cd 5e       	subi	r28, 0xED	; 237
 134:	de 4f       	sbci	r29, 0xFE	; 254
 136:	88 81       	ld	r24, Y
 138:	04 c0       	rjmp	.+8      	; 0x142 <getKeypress+0x40>
	return 0; //returns nothing if no col detected
}

char getKeypress(void)
{
	for(int row = 0; row < 4; row++){
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	c4 30       	cpi	r28, 0x04	; 4
 13e:	d1 05       	cpc	r29, r1
 140:	21 f7       	brne	.-56     	; 0x10a <getKeypress+0x8>
		
		if(col){
			return buttons[row][col-1];
		}
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <getNewKeypress>:

char getNewKeypress(void)
{
	static char last_button;
	char b = getKeypress();
 148:	0e 94 81 00 	call	0x102	; 0x102 <getKeypress>
	
	//Check if we held button down
	if(b == last_button) return 0;
 14c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <__data_end>
 150:	89 17       	cp	r24, r25
 152:	19 f0       	breq	.+6      	; 0x15a <getNewKeypress+0x12>
	
	last_button = b;
 154:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	
	return b;
 158:	08 95       	ret
{
	static char last_button;
	char b = getKeypress();
	
	//Check if we held button down
	if(b == last_button) return 0;
 15a:	80 e0       	ldi	r24, 0x00	; 0
	
	last_button = b;
	
	return b;
}
 15c:	08 95       	ret

0000015e <updatePin>:
 

int updatePin(char key)
{
	if(key == '*')
 15e:	8a 32       	cpi	r24, 0x2A	; 42
 160:	69 f4       	brne	.+26     	; 0x17c <updatePin+0x1e>
	{
		pindex = 0;
 162:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <pindex+0x1>
 166:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <pindex>
		upass[0] = '*';
 16a:	ef e0       	ldi	r30, 0x0F	; 15
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	80 83       	st	Z, r24
		upass[1] = '*';
 170:	81 83       	std	Z+1, r24	; 0x01
		upass[2] = '*';
 172:	82 83       	std	Z+2, r24	; 0x02
		upass[3] = '*';
 174:	83 83       	std	Z+3, r24	; 0x03
			return 0;
		}
		
	}
	
	return 0;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
		pindex = 0;
		upass[0] = '*';
		upass[1] = '*';
		upass[2] = '*';
		upass[3] = '*';
	}else if(key)
 17c:	88 23       	and	r24, r24
 17e:	71 f0       	breq	.+28     	; 0x19c <updatePin+0x3e>
	{
		upass[pindex] = key;
 180:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <pindex>
 184:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <pindex+0x1>
 188:	f9 01       	movw	r30, r18
 18a:	e1 5f       	subi	r30, 0xF1	; 241
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	80 83       	st	Z, r24
		pindex++;
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <pindex+0x1>
 198:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <pindex>
	}
	
	if(pindex == 4)
 19c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <pindex>
 1a0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <pindex+0x1>
 1a4:	04 97       	sbiw	r24, 0x04	; 4
 1a6:	09 f0       	breq	.+2      	; 0x1aa <updatePin+0x4c>
 1a8:	50 c0       	rjmp	.+160    	; 0x24a <updatePin+0xec>
	{
		if(strcmp(upass, dpass) == 0)
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 92 02 	call	0x524	; 0x524 <strcmp>
 1b6:	89 2b       	or	r24, r25
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <updatePin+0x78>
		{
			upass[0] = '*';
 1ba:	ef e0       	ldi	r30, 0x0F	; 15
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	8a e2       	ldi	r24, 0x2A	; 42
 1c0:	80 83       	st	Z, r24
			upass[1] = '*';
 1c2:	81 83       	std	Z+1, r24	; 0x01
			upass[2] = '*';
 1c4:	82 83       	std	Z+2, r24	; 0x02
			upass[3] = '*';
 1c6:	83 83       	std	Z+3, r24	; 0x03
			pindex = 0;
 1c8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <pindex+0x1>
 1cc:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <pindex>
			return 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret
		}
		else if(strcmp(upass, cpass) == 0)
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	8f e0       	ldi	r24, 0x0F	; 15
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 92 02 	call	0x524	; 0x524 <strcmp>
 1e2:	89 2b       	or	r24, r25
 1e4:	71 f4       	brne	.+28     	; 0x202 <updatePin+0xa4>
		{
			upass[0] = '*';
 1e6:	ef e0       	ldi	r30, 0x0F	; 15
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	8a e2       	ldi	r24, 0x2A	; 42
 1ec:	80 83       	st	Z, r24
			upass[1] = '*';
 1ee:	81 83       	std	Z+1, r24	; 0x01
			upass[2] = '*';
 1f0:	82 83       	std	Z+2, r24	; 0x02
			upass[3] = '*';
 1f2:	83 83       	std	Z+3, r24	; 0x03
			pindex = 0;
 1f4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <pindex+0x1>
 1f8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <pindex>
			return 2;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret
		}
		else if(strcmp(upass, ppass) == 0)
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	71 e0       	ldi	r23, 0x01	; 1
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 92 02 	call	0x524	; 0x524 <strcmp>
 20e:	89 2b       	or	r24, r25
 210:	71 f4       	brne	.+28     	; 0x22e <updatePin+0xd0>
		{
			upass[0] = '*';
 212:	ef e0       	ldi	r30, 0x0F	; 15
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	8a e2       	ldi	r24, 0x2A	; 42
 218:	80 83       	st	Z, r24
			upass[1] = '*';
 21a:	81 83       	std	Z+1, r24	; 0x01
			upass[2] = '*';
 21c:	82 83       	std	Z+2, r24	; 0x02
			upass[3] = '*';
 21e:	83 83       	std	Z+3, r24	; 0x03
			pindex = 0;
 220:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <pindex+0x1>
 224:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <pindex>
			return 3;
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	08 95       	ret
		}
		else
		{
			upass[0] = '*';
 22e:	ef e0       	ldi	r30, 0x0F	; 15
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	8a e2       	ldi	r24, 0x2A	; 42
 234:	80 83       	st	Z, r24
			upass[1] = '*';
 236:	81 83       	std	Z+1, r24	; 0x01
			upass[2] = '*';
 238:	82 83       	std	Z+2, r24	; 0x02
			upass[3] = '*';
 23a:	83 83       	std	Z+3, r24	; 0x03
			pindex = 0;
 23c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <pindex+0x1>
 240:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <pindex>
			return 0;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 95       	ret
		}
		
	}
	
	return 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 95       	ret

00000250 <main>:


int main(void)
{
	// initialize Keypad & timer
	initKeypad();
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <initKeypad>
	initTimer();
 254:	0e 94 45 02 	call	0x48a	; 0x48a <initTimer>
	set_count(0);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_count>
	init_uart();
 260:	0e 94 7e 02 	call	0x4fc	; 0x4fc <init_uart>
	
	// initialize LED ports
	DDRC |= 0xFF;
 264:	87 b1       	in	r24, 0x07	; 7
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	87 b9       	out	0x07, r24	; 7
	
	// initialize state
	state = 0;
 26a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <state+0x1>
 26e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <state>
	
	// main loop
    while (1) 
    {
		if(state == 0) // Runs in disarmed state
 272:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 276:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 27a:	89 2b       	or	r24, r25
 27c:	11 f4       	brne	.+4      	; 0x282 <main+0x32>
		{
			disarmed();
 27e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <disarmed>
		}
		if(state == 1) // Runs while system is arming
 282:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 286:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	11 f4       	brne	.+4      	; 0x292 <main+0x42>
		{
			arming();
 28e:	0e 94 88 01 	call	0x310	; 0x310 <arming>
		}
		if(state == 2) // runs while system is armed
 292:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 296:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 29a:	02 97       	sbiw	r24, 0x02	; 2
 29c:	11 f4       	brne	.+4      	; 0x2a2 <main+0x52>
		{
			armed();
 29e:	0e 94 b5 01 	call	0x36a	; 0x36a <armed>
		}
		if(state == 3) // runs while system has detected something (30s)
 2a2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 2a6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 2aa:	03 97       	sbiw	r24, 0x03	; 3
 2ac:	11 f4       	brne	.+4      	; 0x2b2 <main+0x62>
		{
			detected();
 2ae:	0e 94 bf 01 	call	0x37e	; 0x37e <detected>
		}
		if(state == 4) // runs while system is in panic mode
 2b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 2b6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 2ba:	04 97       	sbiw	r24, 0x04	; 4
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <main+0x72>
		{
			panic();
 2be:	0e 94 1a 02 	call	0x434	; 0x434 <panic>
		}
		if(state == 5)
 2c2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 2c6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 2ca:	05 97       	sbiw	r24, 0x05	; 5
 2cc:	91 f6       	brne	.-92     	; 0x272 <main+0x22>
		{
			alarming();
 2ce:	0e 94 1e 02 	call	0x43c	; 0x43c <alarming>
 2d2:	cf cf       	rjmp	.-98     	; 0x272 <main+0x22>

000002d4 <disarmed>:
*/

void disarmed(void)
{
	// turn on disarmed led
	PORTLED |= (1<<LED1);
 2d4:	40 9a       	sbi	0x08, 0	; 8
	char keypress = getNewKeypress(); // get keypress
 2d6:	0e 94 a4 00 	call	0x148	; 0x148 <getNewKeypress>
	
	if(keypress == '#') // check if # was pressed
 2da:	83 32       	cpi	r24, 0x23	; 35
 2dc:	39 f4       	brne	.+14     	; 0x2ec <disarmed+0x18>
	{
		state = 1; // change state from disarmed to arming
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <state+0x1>
 2e6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <state>
 2ea:	08 95       	ret
	}
	else if(keypress) // check if anything else was pressed
 2ec:	88 23       	and	r24, r24
 2ee:	79 f0       	breq	.+30     	; 0x30e <disarmed+0x3a>
	{
		pinmatch = updatePin(keypress); // updates pin acordingly
 2f0:	99 27       	eor	r25, r25
 2f2:	0e 94 af 00 	call	0x15e	; 0x15e <updatePin>
		if(pinmatch == 2) // check is curator code was entered
 2f6:	02 97       	sbiw	r24, 0x02	; 2
 2f8:	31 f4       	brne	.+12     	; 0x306 <disarmed+0x32>
		{
			curatormode = 1;  // activates curator mode
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <curatormode+0x1>
 302:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <curatormode>
		}
		pinmatch = 0; // resets pinmatch
 306:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <pinmatch+0x1>
 30a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <pinmatch>
 30e:	08 95       	ret

00000310 <arming>:
	}
	
}

void arming(void)
{
 310:	cf 93       	push	r28
	set_count(0);  // resets counter variable
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_count>
	stemp = 0;
 31a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <stemp+0x1>
 31e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <stemp>
	while(get_count() < 5000) // delays for 15s
	{
		if((get_count() - stemp) >= 200) // blinks disarmed/arming led with 400ms period
		{
			PORTLED ^= (1<<LED1);  // toggles LED
 322:	c1 e0       	ldi	r28, 0x01	; 1

void arming(void)
{
	set_count(0);  // resets counter variable
	stemp = 0;
	while(get_count() < 5000) // delays for 15s
 324:	14 c0       	rjmp	.+40     	; 0x34e <arming+0x3e>
	{
		if((get_count() - stemp) >= 200) // blinks disarmed/arming led with 400ms period
 326:	0e 94 53 02 	call	0x4a6	; 0x4a6 <get_count>
 32a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <stemp>
 32e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <stemp+0x1>
 332:	82 1b       	sub	r24, r18
 334:	93 0b       	sbc	r25, r19
 336:	88 3c       	cpi	r24, 0xC8	; 200
 338:	91 05       	cpc	r25, r1
 33a:	48 f0       	brcs	.+18     	; 0x34e <arming+0x3e>
		{
			PORTLED ^= (1<<LED1);  // toggles LED
 33c:	88 b1       	in	r24, 0x08	; 8
 33e:	8c 27       	eor	r24, r28
 340:	88 b9       	out	0x08, r24	; 8
			stemp = get_count();
 342:	0e 94 53 02 	call	0x4a6	; 0x4a6 <get_count>
 346:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <stemp+0x1>
 34a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <stemp>

void arming(void)
{
	set_count(0);  // resets counter variable
	stemp = 0;
	while(get_count() < 5000) // delays for 15s
 34e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <get_count>
 352:	88 38       	cpi	r24, 0x88	; 136
 354:	93 41       	sbci	r25, 0x13	; 19
 356:	38 f3       	brcs	.-50     	; 0x326 <arming+0x16>
			PORTLED ^= (1<<LED1);  // toggles LED
			stemp = get_count();
		}
	}
	
	state = 2; // Changes state from arming to armed
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <state+0x1>
 360:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <state>
	
	PORTLED &= ~(1<<LED1); // turns off arming LED
 364:	40 98       	cbi	0x08, 0	; 8
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <armed>:

void armed(void)
{
	PORTLED |= (1<<LED2); //turns on armed LED
 36a:	41 9a       	sbi	0x08, 1	; 8
	if(PIND & (1<<PIND4)) //Checks for PIR detection
 36c:	4c 9b       	sbis	0x09, 4	; 9
 36e:	06 c0       	rjmp	.+12     	; 0x37c <armed+0x12>
	{
		state = 3; // changes state from armed to alarming
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <state+0x1>
 378:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <state>
 37c:	08 95       	ret

0000037e <detected>:
	}
}

void detected(void)
{
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
	set_count(0);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 5e 02 	call	0x4bc	; 0x4bc <set_count>
	stemp = 0;
 38c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <stemp+0x1>
 390:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <stemp>
	while(get_count() < 30000)
	{
		if((get_count() - stemp) >= 200) // blinks disarmed/arming led with 400ms period
		{
			PORTLED ^= (1<<LED2);  // toggles LED
 394:	12 e0       	ldi	r17, 0x02	; 2
			{
				state = 0;
			}
			else if(pinmatch == 3)
			{
				state = 4;
 396:	c4 e0       	ldi	r28, 0x04	; 4
 398:	d0 e0       	ldi	r29, 0x00	; 0

void detected(void)
{
	set_count(0);
	stemp = 0;
	while(get_count() < 30000)
 39a:	36 c0       	rjmp	.+108    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		if((get_count() - stemp) >= 200) // blinks disarmed/arming led with 400ms period
 39c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <get_count>
 3a0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <stemp>
 3a4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <stemp+0x1>
 3a8:	82 1b       	sub	r24, r18
 3aa:	93 0b       	sbc	r25, r19
 3ac:	88 3c       	cpi	r24, 0xC8	; 200
 3ae:	91 05       	cpc	r25, r1
 3b0:	48 f0       	brcs	.+18     	; 0x3c4 <detected+0x46>
		{
			PORTLED ^= (1<<LED2);  // toggles LED
 3b2:	88 b1       	in	r24, 0x08	; 8
 3b4:	81 27       	eor	r24, r17
 3b6:	88 b9       	out	0x08, r24	; 8
			stemp = get_count();
 3b8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <get_count>
 3bc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <stemp+0x1>
 3c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <stemp>
		}
		
		keypress = getNewKeypress();
 3c4:	0e 94 a4 00 	call	0x148	; 0x148 <getNewKeypress>
 3c8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <keypress>
		
		if(keypress)
 3cc:	88 23       	and	r24, r24
 3ce:	a9 f0       	breq	.+42     	; 0x3fa <detected+0x7c>
		{
			pinmatch = updatePin(keypress);
 3d0:	99 27       	eor	r25, r25
 3d2:	0e 94 af 00 	call	0x15e	; 0x15e <updatePin>
			if(pinmatch == 1)
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	91 05       	cpc	r25, r1
 3da:	29 f4       	brne	.+10     	; 0x3e6 <detected+0x68>
			{
				state = 0;
 3dc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <state+0x1>
 3e0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <state>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <detected+0x74>
			}
			else if(pinmatch == 3)
 3e6:	03 97       	sbiw	r24, 0x03	; 3
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <detected+0x74>
			{
				state = 4;
 3ea:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <state+0x1>
 3ee:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <state>
			}
			
			pinmatch = 0;
 3f2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <pinmatch+0x1>
 3f6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <pinmatch>
		}
		
		if((state == 0) | (state == 4)) break;
 3fa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 3fe:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	89 2b       	or	r24, r25
 406:	29 f0       	breq	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

void detected(void)
{
	set_count(0);
	stemp = 0;
	while(get_count() < 30000)
 408:	0e 94 53 02 	call	0x4a6	; 0x4a6 <get_count>
 40c:	80 33       	cpi	r24, 0x30	; 48
 40e:	95 47       	sbci	r25, 0x75	; 117
 410:	28 f2       	brcs	.-118    	; 0x39c <detected+0x1e>
		}
		
		if((state == 0) | (state == 4)) break;
	}
	
	if(state == 3) state = 5;
 412:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <state>
 416:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <state+0x1>
 41a:	03 97       	sbiw	r24, 0x03	; 3
 41c:	31 f4       	brne	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <state+0x1>
 426:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <state>
	PORTLED &= ~(1<<LED2); //turn off armed LED
 42a:	41 98       	cbi	0x08, 1	; 8
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	08 95       	ret

00000434 <panic>:

void panic(void)
{
	PORTLED |= (1<<LED1) | (1<<LED4); // turn on disarmed led and silent alarm LED
 434:	88 b1       	in	r24, 0x08	; 8
 436:	89 60       	ori	r24, 0x09	; 9
 438:	88 b9       	out	0x08, r24	; 8
 43a:	08 95       	ret

0000043c <alarming>:
}

void alarming(void)
{
	PORTLED |= (1<<LED3);
 43c:	42 9a       	sbi	0x08, 2	; 8
 43e:	08 95       	ret

00000440 <__vector_11>:

unsigned volatile long int count;

// interrupt for counter
ISR (TIMER1_COMPA_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
	count++;
 452:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <count>
 456:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <count+0x1>
 45a:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <count+0x2>
 45e:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <count+0x3>
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	a1 1d       	adc	r26, r1
 466:	b1 1d       	adc	r27, r1
 468:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <count>
 46c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <count+0x1>
 470:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <count+0x2>
 474:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <count+0x3>
}
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <initTimer>:

void initTimer(void)
{
	OCR1A = 250;
 48a:	8a ef       	ldi	r24, 0xFA	; 250
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 492:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1 << OCIE1A);
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = (1 << CS11) | (1 << CS10) | (1<<WGM12);
 49c:	8b e0       	ldi	r24, 0x0B	; 11
 49e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	sei();
 4a2:	78 94       	sei
 4a4:	08 95       	ret

000004a6 <get_count>:
}

unsigned int get_count(void){
	unsigned int cnt_copy;
	cli();
 4a6:	f8 94       	cli
	cnt_copy = count;
 4a8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <count>
 4ac:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <count+0x1>
 4b0:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <count+0x2>
 4b4:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <count+0x3>
	sei();
 4b8:	78 94       	sei
	return cnt_copy;
}
 4ba:	08 95       	ret

000004bc <set_count>:

void set_count(unsigned int cnt){
	cli();
 4bc:	f8 94       	cli
	count = cnt;
 4be:	a0 e0       	ldi	r26, 0x00	; 0
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <count>
 4c6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <count+0x1>
 4ca:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <count+0x2>
 4ce:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <count+0x3>
	sei();
 4d2:	78 94       	sei
 4d4:	08 95       	ret

000004d6 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 4d6:	e0 ec       	ldi	r30, 0xC0	; 192
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	90 81       	ld	r25, Z
 4dc:	95 ff       	sbrs	r25, 5
 4de:	fd cf       	rjmp	.-6      	; 0x4da <uart_putchar+0x4>
	UDR0 = c;
 4e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	08 95       	ret

000004ea <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 4ea:	e0 ec       	ldi	r30, 0xC0	; 192
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	88 23       	and	r24, r24
 4f2:	ec f7       	brge	.-6      	; 0x4ee <uart_getchar+0x4>
	return UDR0;
 4f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	08 95       	ret

000004fc <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 4fc:	88 e1       	ldi	r24, 0x18	; 24
 4fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 502:	87 e6       	ldi	r24, 0x67	; 103
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 50a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	stdout = &mystdout;
 50e:	ec e4       	ldi	r30, 0x4C	; 76
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	8e e2       	ldi	r24, 0x2E	; 46
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	93 83       	std	Z+3, r25	; 0x03
 518:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 51a:	80 e2       	ldi	r24, 0x20	; 32
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	91 83       	std	Z+1, r25	; 0x01
 520:	80 83       	st	Z, r24
 522:	08 95       	ret

00000524 <strcmp>:
 524:	fb 01       	movw	r30, r22
 526:	dc 01       	movw	r26, r24
 528:	8d 91       	ld	r24, X+
 52a:	01 90       	ld	r0, Z+
 52c:	80 19       	sub	r24, r0
 52e:	01 10       	cpse	r0, r1
 530:	d9 f3       	breq	.-10     	; 0x528 <strcmp+0x4>
 532:	99 0b       	sbc	r25, r25
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
