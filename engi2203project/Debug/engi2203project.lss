
engi2203project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7b  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000998  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f4  00000000  00000000  00001ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017c  00000000  00000000  000027e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initKeypad>:
					  {'7', '8', '9'},
					  {'*', '0', '#'}};

void initKeypad(void)
{
	ROWPORT &= ~(1<<ROW1) & ~(1<<ROW2) & ~(1<<ROW3) & ~(1<<ROW4); //Set Row Ports low
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	85 b9       	out	0x05, r24	; 5
	COLPORT |= (1<<COL1) | (1<<COL2) | (1<<COL3); //Sets Column Ports high
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 6e       	ori	r24, 0xE0	; 224
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <setRowLow>:
}

void setRowLow(int row)
{
  b4:	9c 01       	movw	r18, r24
	ROWDDR &=  ~(1<<ROW1) & ~(1<<ROW2) & ~(1<<ROW3) & ~(1<<ROW4); // Sets all Rows to Input
  b6:	94 b1       	in	r25, 0x04	; 4
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	94 b9       	out	0x04, r25	; 4
		
	if(row == 0)
  bc:	21 15       	cp	r18, r1
  be:	31 05       	cpc	r19, r1
  c0:	11 f4       	brne	.+4      	; 0xc6 <setRowLow+0x12>
	{
		ROWDDR |= (1<<ROW1); // Sets Row 1 to Output
  c2:	23 9a       	sbi	0x04, 3	; 4
  c4:	08 95       	ret
	}else if(row == 1)
  c6:	21 30       	cpi	r18, 0x01	; 1
  c8:	31 05       	cpc	r19, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <setRowLow+0x1c>
	{
		ROWDDR |= (1<<ROW2); // Sets Row 2 to Output
  cc:	22 9a       	sbi	0x04, 2	; 4
  ce:	08 95       	ret
	}else if(row == 2)
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	11 f4       	brne	.+4      	; 0xda <setRowLow+0x26>
	{
		ROWDDR |= (1<<ROW3); // Sets Row 3 to Output
  d6:	21 9a       	sbi	0x04, 1	; 4
  d8:	08 95       	ret
	}else
	{
		ROWDDR |= (1<<ROW4); // Sets Row 4 to Output
  da:	20 9a       	sbi	0x04, 0	; 4
  dc:	08 95       	ret

000000de <colPushed>:
	}
}

int colPushed(void)
{
	if((COLPIN & (1<<COL1)) == 0) //Checks if Column 1 is low
  de:	4f 9b       	sbis	0x09, 7	; 9
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <colPushed+0x12>
	{
		return 1;
	}
	else if((COLPIN & (1<<COL2)) == 0) //Checks if Column 2 is low
  e2:	4e 9b       	sbis	0x09, 6	; 9
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <colPushed+0x18>
	{
		return 2;
	}
	else if((COLPIN & (1<<COL3)) == 0) //Checks if Column 3 is low
  e6:	4d 9b       	sbis	0x09, 5	; 9
  e8:	09 c0       	rjmp	.+18     	; 0xfc <colPushed+0x1e>
	{
		return 3;
	}
	
	
	return 0; //returns nothing if no col detected
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

int colPushed(void)
{
	if((COLPIN & (1<<COL1)) == 0) //Checks if Column 1 is low
	{
		return 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret
	}
	else if((COLPIN & (1<<COL2)) == 0) //Checks if Column 2 is low
	{
		return 2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
	}
	else if((COLPIN & (1<<COL3)) == 0) //Checks if Column 3 is low
	{
		return 3;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return 0; //returns nothing if no col detected
}
 100:	08 95       	ret

00000102 <getKeypress>:

char getKeypress(void)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
	for(int row = 0; row < 4; row++){
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
		setRowLow(row);
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <setRowLow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <getKeypress+0x12>
 118:	00 c0       	rjmp	.+0      	; 0x11a <getKeypress+0x18>
 11a:	00 00       	nop
		_delay_ms(20);
		
		int col = colPushed();
 11c:	0e 94 6f 00 	call	0xde	; 0xde <colPushed>
		
		if(col){
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	59 f0       	breq	.+22     	; 0x13a <getKeypress+0x38>
			return buttons[row][col-1];
 124:	9e 01       	movw	r18, r28
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	c2 0f       	add	r28, r18
 12c:	d3 1f       	adc	r29, r19
 12e:	c8 0f       	add	r28, r24
 130:	d9 1f       	adc	r29, r25
 132:	c1 50       	subi	r28, 0x01	; 1
 134:	df 4f       	sbci	r29, 0xFF	; 255
 136:	88 81       	ld	r24, Y
 138:	04 c0       	rjmp	.+8      	; 0x142 <getKeypress+0x40>
	return 0; //returns nothing if no col detected
}

char getKeypress(void)
{
	for(int row = 0; row < 4; row++){
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	c4 30       	cpi	r28, 0x04	; 4
 13e:	d1 05       	cpc	r29, r1
 140:	21 f7       	brne	.-56     	; 0x10a <getKeypress+0x8>
		
		if(col){
			return buttons[row][col-1];
		}
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <getNewKeypress>:

char getNewKeypress(void)
{
	static char last_button;
	char b = getKeypress();
 148:	0e 94 81 00 	call	0x102	; 0x102 <getKeypress>
	
	//Check if we held button down
	if(b == last_button) return 0;
 14c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 150:	89 17       	cp	r24, r25
 152:	19 f0       	breq	.+6      	; 0x15a <getNewKeypress+0x12>
	
	last_button = b;
 154:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	return b;
 158:	08 95       	ret
{
	static char last_button;
	char b = getKeypress();
	
	//Check if we held button down
	if(b == last_button) return 0;
 15a:	80 e0       	ldi	r24, 0x00	; 0
	
	last_button = b;
	
	return b;
}
 15c:	08 95       	ret

0000015e <main>:


int main(void)
{
	// initialize Keypad & timer
	initKeypad();
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <initKeypad>
	initTimer();
 162:	0e 94 4a 01 	call	0x294	; 0x294 <initTimer>
	set_count(0);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <set_count>
	
	// initialize LED ports
	DDRC |= 0xFF;
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	87 b9       	out	0x07, r24	; 7
	
	// initialize state
	state = 0;
 174:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state+0x1>
 178:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
	
	// main loop
    while (1) 
    {
		if(state == 0) // Runs in disarmed state
 17c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 180:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <state+0x1>
 184:	89 2b       	or	r24, r25
 186:	11 f4       	brne	.+4      	; 0x18c <main+0x2e>
		{
			disarmed();
 188:	0e 94 df 00 	call	0x1be	; 0x1be <disarmed>
		}
		if(state == 1) // Runs while system is arming
 18c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 190:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <state+0x1>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	11 f4       	brne	.+4      	; 0x19c <main+0x3e>
		{
			arming();
 198:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <arming>
		}
		if(state == 2) // runs while system is armed
 19c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1a0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <state+0x1>
 1a4:	02 97       	sbiw	r24, 0x02	; 2
 1a6:	11 f4       	brne	.+4      	; 0x1ac <main+0x4e>
		{
			armed();
 1a8:	0e 94 18 01 	call	0x230	; 0x230 <armed>
		}
		if(state == 3) // runs while system is alarming
 1ac:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <state+0x1>
 1b4:	03 97       	sbiw	r24, 0x03	; 3
 1b6:	11 f7       	brne	.-60     	; 0x17c <main+0x1e>
		{
			alarming();
 1b8:	0e 94 23 01 	call	0x246	; 0x246 <alarming>
 1bc:	df cf       	rjmp	.-66     	; 0x17c <main+0x1e>

000001be <disarmed>:
#include "states.h"

void disarmed(void)
{
	// turn on disarmed led
	PORTLED |= (1<<LED1);
 1be:	40 9a       	sbi	0x08, 0	; 8
	char keypress = getNewKeypress(); // get keypress
 1c0:	0e 94 a4 00 	call	0x148	; 0x148 <getNewKeypress>
	
	if(keypress == '#') // check if # was pressed
 1c4:	83 32       	cpi	r24, 0x23	; 35
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <disarmed+0x16>
	{
		state = 1; // change state from disarmed to arming
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <state+0x1>
 1d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
 1d4:	08 95       	ret

000001d6 <arming>:
	}
	
}

void arming(void)
{
 1d6:	cf 93       	push	r28
	set_count(0);  // resets counter variable
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <set_count>
	temp = 0;
 1e0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <temp+0x1>
 1e4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <temp>
	while(get_count() < 15000) // delays for 15s
	{
		if((get_count() - temp) >= 200) // blinks disarmed/arming led with 400ms period
		{
			PORTLED ^= (1<<LED1);
 1e8:	c1 e0       	ldi	r28, 0x01	; 1

void arming(void)
{
	set_count(0);  // resets counter variable
	temp = 0;
	while(get_count() < 15000) // delays for 15s
 1ea:	14 c0       	rjmp	.+40     	; 0x214 <arming+0x3e>
	{
		if((get_count() - temp) >= 200) // blinks disarmed/arming led with 400ms period
 1ec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <get_count>
 1f0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <temp>
 1f4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <temp+0x1>
 1f8:	82 1b       	sub	r24, r18
 1fa:	93 0b       	sbc	r25, r19
 1fc:	88 3c       	cpi	r24, 0xC8	; 200
 1fe:	91 05       	cpc	r25, r1
 200:	48 f0       	brcs	.+18     	; 0x214 <arming+0x3e>
		{
			PORTLED ^= (1<<LED1);
 202:	88 b1       	in	r24, 0x08	; 8
 204:	8c 27       	eor	r24, r28
 206:	88 b9       	out	0x08, r24	; 8
			temp = get_count();
 208:	0e 94 58 01 	call	0x2b0	; 0x2b0 <get_count>
 20c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <temp+0x1>
 210:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <temp>

void arming(void)
{
	set_count(0);  // resets counter variable
	temp = 0;
	while(get_count() < 15000) // delays for 15s
 214:	0e 94 58 01 	call	0x2b0	; 0x2b0 <get_count>
 218:	88 39       	cpi	r24, 0x98	; 152
 21a:	9a 43       	sbci	r25, 0x3A	; 58
 21c:	38 f3       	brcs	.-50     	; 0x1ec <arming+0x16>
			PORTLED ^= (1<<LED1);
			temp = get_count();
		}
	}
	
	state = 2; // Changes state from arming to armed
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <state+0x1>
 226:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
	
	PORTLED &= ~(1<<LED1); // turns off arming LED
 22a:	40 98       	cbi	0x08, 0	; 8
}
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <armed>:

void armed(void)
{
	PORTLED |= (1<<LED2); //turns on armed LED
 230:	41 9a       	sbi	0x08, 1	; 8
	if(PIND & (1<<PIND4)) //Checks for PIR detection
 232:	4c 9b       	sbis	0x09, 4	; 9
 234:	07 c0       	rjmp	.+14     	; 0x244 <armed+0x14>
	{
		state = 3; // changes state from armed to alarming
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <state+0x1>
 23e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
		PORTLED &= ~(1<<LED2); //turn off armed LED
 242:	41 98       	cbi	0x08, 1	; 8
 244:	08 95       	ret

00000246 <alarming>:
	}
}

void alarming(void)
{
	PORTLED |= (1<<LED3); //turn on alarming LED 
 246:	42 9a       	sbi	0x08, 2	; 8
 248:	08 95       	ret

0000024a <__vector_11>:

#include "timer.h"

// interrupt for counter
ISR (TIMER1_COMPA_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
	count++;
 25c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 260:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count+0x1>
 264:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <count+0x2>
 268:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <count+0x3>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	a1 1d       	adc	r26, r1
 270:	b1 1d       	adc	r27, r1
 272:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 276:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <count+0x1>
 27a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <count+0x2>
 27e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <count+0x3>
}
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <initTimer>:

void initTimer(void)
{
	OCR1A = 250;
 294:	8a ef       	ldi	r24, 0xFA	; 250
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 29c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1 << OCIE1A);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = (1 << CS11) | (1 << CS10) | (1<<WGM12);
 2a6:	8b e0       	ldi	r24, 0x0B	; 11
 2a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	sei();
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <get_count>:
}

unsigned int get_count(void){
	unsigned int cnt_copy;
	cli();
 2b0:	f8 94       	cli
	cnt_copy = count;
 2b2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2b6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count+0x1>
 2ba:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <count+0x2>
 2be:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <count+0x3>
	sei();
 2c2:	78 94       	sei
	return cnt_copy;
}
 2c4:	08 95       	ret

000002c6 <set_count>:

void set_count(unsigned int cnt){
	cli();
 2c6:	f8 94       	cli
	count = cnt;
 2c8:	a0 e0       	ldi	r26, 0x00	; 0
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 2d0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <count+0x1>
 2d4:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <count+0x2>
 2d8:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <count+0x3>
	sei();
 2dc:	78 94       	sei
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
