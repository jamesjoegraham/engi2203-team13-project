
engi2203project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c0  00800100  000022e2  00002376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  008003c0  008003c0  00002636  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002636  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000026d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b16  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c9  00000000  00000000  000054fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa1  00000000  00000000  000066c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000082c  00000000  00000000  00008168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f7  00000000  00000000  00008994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001925  00000000  00000000  0000928b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000abb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_10>
      2c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_11>
      30:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__vector_12>
      34:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_13>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_16>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <beep+0x20>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	13 e0       	ldi	r17, 0x03	; 3
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e2 ee       	ldi	r30, 0xE2	; 226
      fe:	f2 e2       	ldi	r31, 0x22	; 34
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 3c       	cpi	r26, 0xC0	; 192
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	a0 ec       	ldi	r26, 0xC0	; 192
     110:	b3 e0       	ldi	r27, 0x03	; 3
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	aa 31       	cpi	r26, 0x1A	; 26
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 98 03 	call	0x730	; 0x730 <main>
     120:	0c 94 6f 11 	jmp	0x22de	; 0x22de <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <adminDump>:
};

struct codes currentCodes;

void adminDump()
{
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
	printf("In struct currentCodes,\n");
     12c:	8f ed       	ldi	r24, 0xDF	; 223
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
	printf("The placeholder is %c\n\n", currentCodes.placeholder);
     134:	c8 ed       	ldi	r28, 0xD8	; 216
     136:	d3 e0       	ldi	r29, 0x03	; 3
     138:	88 81       	ld	r24, Y
     13a:	1f 92       	push	r1
     13c:	8f 93       	push	r24
     13e:	87 ef       	ldi	r24, 0xF7	; 247
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	9f 93       	push	r25
     144:	8f 93       	push	r24
     146:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	
	printf("The dpass has length %d with content %s\n", currentCodes.dpass_code.codelength, currentCodes.dpass_code.codechars);
     14a:	8b ed       	ldi	r24, 0xDB	; 219
     14c:	93 e0       	ldi	r25, 0x03	; 3
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	8a 81       	ldd	r24, Y+2	; 0x02
     154:	8f 93       	push	r24
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	8f 93       	push	r24
     15a:	8f e0       	ldi	r24, 0x0F	; 15
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	9f 93       	push	r25
     160:	8f 93       	push	r24
     162:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	printf("The default dpass is %s\n\n", default_dpass);
     166:	8a e0       	ldi	r24, 0x0A	; 10
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	9f 93       	push	r25
     16c:	8f 93       	push	r24
     16e:	88 e3       	ldi	r24, 0x38	; 56
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	
	printf("The cpass has length %d with content %s\n", currentCodes.cpass_code.codelength, currentCodes.cpass_code.codechars);
     17a:	85 ee       	ldi	r24, 0xE5	; 229
     17c:	93 e0       	ldi	r25, 0x03	; 3
     17e:	9f 93       	push	r25
     180:	8f 93       	push	r24
     182:	8c 85       	ldd	r24, Y+12	; 0x0c
     184:	8f 93       	push	r24
     186:	8b 85       	ldd	r24, Y+11	; 0x0b
     188:	8f 93       	push	r24
     18a:	82 e5       	ldi	r24, 0x52	; 82
     18c:	92 e0       	ldi	r25, 0x02	; 2
     18e:	9f 93       	push	r25
     190:	8f 93       	push	r24
     192:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	printf("The default cpass is %s\n\n", default_cpass);
     196:	85 e0       	ldi	r24, 0x05	; 5
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	9f 93       	push	r25
     19c:	8f 93       	push	r24
     19e:	8b e7       	ldi	r24, 0x7B	; 123
     1a0:	92 e0       	ldi	r25, 0x02	; 2
     1a2:	9f 93       	push	r25
     1a4:	8f 93       	push	r24
     1a6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	
	printf("The ppass has length %d with content %s\n", currentCodes.ppass_code.codelength, currentCodes.ppass_code.codechars);
     1aa:	8f ee       	ldi	r24, 0xEF	; 239
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	8e 89       	ldd	r24, Y+22	; 0x16
     1b4:	8f 93       	push	r24
     1b6:	8d 89       	ldd	r24, Y+21	; 0x15
     1b8:	8f 93       	push	r24
     1ba:	85 e9       	ldi	r24, 0x95	; 149
     1bc:	92 e0       	ldi	r25, 0x02	; 2
     1be:	9f 93       	push	r25
     1c0:	8f 93       	push	r24
     1c2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
	printf("The default ppass is %s\n\n", default_ppass);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	8e eb       	ldi	r24, 0xBE	; 190
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	9f 93       	push	r25
     1d4:	8f 93       	push	r24
     1d6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
}
     1da:	8d b7       	in	r24, 0x3d	; 61
     1dc:	9e b7       	in	r25, 0x3e	; 62
     1de:	82 96       	adiw	r24, 0x22	; 34
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	9e bf       	out	0x3e, r25	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	8d bf       	out	0x3d, r24	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <adminReset>:

void adminReset()
{
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	6f 97       	sbiw	r28, 0x1f	; 31
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
	struct codes p;
	p.placeholder = '*';
     208:	8a e2       	ldi	r24, 0x2A	; 42
     20a:	89 83       	std	Y+1, r24	; 0x01
	
	strcpy(p.dpass_code.codechars, default_dpass);
     20c:	6a e0       	ldi	r22, 0x0A	; 10
     20e:	71 e0       	ldi	r23, 0x01	; 1
     210:	ce 01       	movw	r24, r28
     212:	04 96       	adiw	r24, 0x04	; 4
     214:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	p.dpass_code.codelength = sizeof(default_dpass) - 1;
     218:	04 e0       	ldi	r16, 0x04	; 4
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	1b 83       	std	Y+3, r17	; 0x03
     21e:	0a 83       	std	Y+2, r16	; 0x02
	
	strcpy(p.cpass_code.codechars, default_cpass);
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	ce 01       	movw	r24, r28
     226:	0e 96       	adiw	r24, 0x0e	; 14
     228:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	p.cpass_code.codelength = sizeof(default_cpass) - 1;
     22c:	1d 87       	std	Y+13, r17	; 0x0d
     22e:	0c 87       	std	Y+12, r16	; 0x0c
	
	strcpy(p.ppass_code.codechars, default_ppass);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	71 e0       	ldi	r23, 0x01	; 1
     234:	ce 01       	movw	r24, r28
     236:	48 96       	adiw	r24, 0x18	; 24
     238:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	p.ppass_code.codelength = sizeof(default_ppass) - 1;
     23c:	1f 8b       	std	Y+23, r17	; 0x17
     23e:	0e 8b       	std	Y+22, r16	; 0x16
	
	eeprom_write_block((const void*)&p, (void*)EEPROMREGISTER, sizeof(p)); // write to eeprom
     240:	4f e1       	ldi	r20, 0x1F	; 31
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	6c e0       	ldi	r22, 0x0C	; 12
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	ce 01       	movw	r24, r28
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	0e 94 20 11 	call	0x2240	; 0x2240 <eeprom_write_block>
	currentCodes = p;
     250:	8f e1       	ldi	r24, 0x1F	; 31
     252:	fe 01       	movw	r30, r28
     254:	31 96       	adiw	r30, 0x01	; 1
     256:	a8 ed       	ldi	r26, 0xD8	; 216
     258:	b3 e0       	ldi	r27, 0x03	; 3
     25a:	01 90       	ld	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	8a 95       	dec	r24
     260:	e1 f7       	brne	.-8      	; 0x25a <adminReset+0x6a>
}
     262:	6f 96       	adiw	r28, 0x1f	; 31
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <adminInit>:


void adminInit()
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	6f 97       	sbiw	r28, 0x1f	; 31
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
	eeprom_is_ready();
     28c:	8f b3       	in	r24, 0x1f	; 31
	struct codes passcodes;
	eeprom_read_block((void*)&passcodes, (const void*)EEPROMREGISTER, sizeof(passcodes));
     28e:	4f e1       	ldi	r20, 0x1F	; 31
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	6c e0       	ldi	r22, 0x0C	; 12
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	ce 01       	movw	r24, r28
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	0e 94 10 11 	call	0x2220	; 0x2220 <eeprom_read_block>
	
	if (passcodes.placeholder != '*') // if there are no loaded codes
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	8a 32       	cpi	r24, 0x2A	; 42
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <adminInit+0x3a>
	{
		printf("Failed to load codes!\n");
     2a4:	88 ed       	ldi	r24, 0xD8	; 216
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		adminReset();
     2ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <adminReset>
     2b0:	0d c0       	rjmp	.+26     	; 0x2cc <adminInit+0x54>
	}
	else
	{
		printf("Successfully loaded codes!\n");
     2b2:	8e ee       	ldi	r24, 0xEE	; 238
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
		currentCodes = passcodes;
     2ba:	8f e1       	ldi	r24, 0x1F	; 31
     2bc:	fe 01       	movw	r30, r28
     2be:	31 96       	adiw	r30, 0x01	; 1
     2c0:	a8 ed       	ldi	r26, 0xD8	; 216
     2c2:	b3 e0       	ldi	r27, 0x03	; 3
     2c4:	01 90       	ld	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	8a 95       	dec	r24
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <adminInit+0x4c>
	}
	
	adminDump();
     2cc:	0e 94 94 00 	call	0x128	; 0x128 <adminDump>
}
     2d0:	6f 96       	adiw	r28, 0x1f	; 31
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <adminWrite>:

void adminWrite()
{
	eeprom_write_block((const void*)&currentCodes, (void*)EEPROMREGISTER, sizeof(currentCodes));	
     2e2:	4f e1       	ldi	r20, 0x1F	; 31
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	6c e0       	ldi	r22, 0x0C	; 12
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	88 ed       	ldi	r24, 0xD8	; 216
     2ec:	93 e0       	ldi	r25, 0x03	; 3
     2ee:	0e 94 20 11 	call	0x2240	; 0x2240 <eeprom_write_block>
	printf("Codes written to EEPROM\n");
     2f2:	89 e0       	ldi	r24, 0x09	; 9
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
     2fa:	08 95       	ret

000002fc <getDPASS>:
}

int getDPASS(char* c)
{
	strcpy(c, currentCodes.dpass_code.codechars);
     2fc:	6b ed       	ldi	r22, 0xDB	; 219
     2fe:	73 e0       	ldi	r23, 0x03	; 3
     300:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	return currentCodes.dpass_code.codelength;
}
     304:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <currentCodes+0x1>
     308:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <currentCodes+0x2>
     30c:	08 95       	ret

0000030e <setDPASS>:

void setDPASS(char* c, int n)
{
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	c8 2f       	mov	r28, r24
     318:	d9 2f       	mov	r29, r25
     31a:	8b 01       	movw	r16, r22
	strcpy(currentCodes.dpass_code.codechars, c);
     31c:	68 2f       	mov	r22, r24
     31e:	79 2f       	mov	r23, r25
     320:	8b ed       	ldi	r24, 0xDB	; 219
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	currentCodes.dpass_code.codelength = n;
     328:	10 93 da 03 	sts	0x03DA, r17	; 0x8003da <currentCodes+0x2>
     32c:	00 93 d9 03 	sts	0x03D9, r16	; 0x8003d9 <currentCodes+0x1>
	printf("DPASS Set to %s", c);
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	81 e2       	ldi	r24, 0x21	; 33
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	9f 93       	push	r25
     33a:	8f 93       	push	r24
     33c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	08 95       	ret

00000352 <getCPASS>:

int getCPASS(char* c)
{
	strcpy(c, currentCodes.cpass_code.codechars);
     352:	65 ee       	ldi	r22, 0xE5	; 229
     354:	73 e0       	ldi	r23, 0x03	; 3
     356:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	return currentCodes.cpass_code.codelength;
}
     35a:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentCodes+0xb>
     35e:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <currentCodes+0xc>
     362:	08 95       	ret

00000364 <setCPASS>:

void setCPASS(char* c, int n)
{
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	c8 2f       	mov	r28, r24
     36e:	d9 2f       	mov	r29, r25
     370:	8b 01       	movw	r16, r22
	strcpy(currentCodes.cpass_code.codechars, c);
     372:	68 2f       	mov	r22, r24
     374:	79 2f       	mov	r23, r25
     376:	85 ee       	ldi	r24, 0xE5	; 229
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	currentCodes.cpass_code.codelength = n;
     37e:	10 93 e4 03 	sts	0x03E4, r17	; 0x8003e4 <currentCodes+0xc>
     382:	00 93 e3 03 	sts	0x03E3, r16	; 0x8003e3 <currentCodes+0xb>
	printf("CPASS Set to %s", c);
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	81 e3       	ldi	r24, 0x31	; 49
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <getPPASS>:

int getPPASS(char* c)
{
	strcpy(c, currentCodes.ppass_code.codechars);
     3a8:	6f ee       	ldi	r22, 0xEF	; 239
     3aa:	73 e0       	ldi	r23, 0x03	; 3
     3ac:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	return currentCodes.ppass_code.codelength;
}
     3b0:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <currentCodes+0x15>
     3b4:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <currentCodes+0x16>
     3b8:	08 95       	ret

000003ba <setPPASS>:

void setPPASS(char* c, int n)
{
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	c8 2f       	mov	r28, r24
     3c4:	d9 2f       	mov	r29, r25
     3c6:	8b 01       	movw	r16, r22
	strcpy(currentCodes.ppass_code.codechars, c);
     3c8:	68 2f       	mov	r22, r24
     3ca:	79 2f       	mov	r23, r25
     3cc:	8f ee       	ldi	r24, 0xEF	; 239
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	currentCodes.ppass_code.codelength = n;
     3d4:	10 93 ee 03 	sts	0x03EE, r17	; 0x8003ee <currentCodes+0x16>
     3d8:	00 93 ed 03 	sts	0x03ED, r16	; 0x8003ed <currentCodes+0x15>
	printf("PPASS Set to %s", c);
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	81 e4       	ldi	r24, 0x41	; 65
     3e2:	93 e0       	ldi	r25, 0x03	; 3
     3e4:	9f 93       	push	r25
     3e6:	8f 93       	push	r24
     3e8:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <detectHallEffect>:
#include "halleffect.h"


int detectHallEffect()
{
	hallDD &= ~(1 << hallSensor); // turn DD off for input
     3fe:	25 98       	cbi	0x04, 5	; 4
	//	DDRB &= ~(1 << PORTB5);
	
	if (hallPort & (1 << hallSensor)) // if HIGH
     400:	83 b1       	in	r24, 0x03	; 3
	}
	else
	{
		return 0;
	}
}
     402:	85 fb       	bst	r24, 5
     404:	88 27       	eor	r24, r24
     406:	80 f9       	bld	r24, 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	08 95       	ret

0000040c <initKeypad>:
	if(b == last_button) return 0;
	
	last_button = b;
	
	return b;
}
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	68 97       	sbiw	r28, 0x18	; 24
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	85 b1       	in	r24, 0x05	; 5
     422:	80 7f       	andi	r24, 0xF0	; 240
     424:	85 b9       	out	0x05, r24	; 5
     426:	8b b1       	in	r24, 0x0b	; 11
     428:	80 6e       	ori	r24, 0xE0	; 224
     42a:	8b b9       	out	0x0b, r24	; 11
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 7e 01 	call	0x2fc	; 0x2fc <getDPASS>
     434:	ce 01       	movw	r24, r28
     436:	09 96       	adiw	r24, 0x09	; 9
     438:	0e 94 a9 01 	call	0x352	; 0x352 <getCPASS>
     43c:	ce 01       	movw	r24, r28
     43e:	41 96       	adiw	r24, 0x11	; 17
     440:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <getPPASS>
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	8e e1       	ldi	r24, 0x1E	; 30
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
     452:	be 01       	movw	r22, r28
     454:	67 5f       	subi	r22, 0xF7	; 247
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	89 e1       	ldi	r24, 0x19	; 25
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
     460:	be 01       	movw	r22, r28
     462:	6f 5e       	subi	r22, 0xEF	; 239
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	84 e1       	ldi	r24, 0x14	; 20
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
     46e:	68 96       	adiw	r28, 0x18	; 24
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <setRowLow>:
     480:	9c 01       	movw	r18, r24
     482:	94 b1       	in	r25, 0x04	; 4
     484:	90 7f       	andi	r25, 0xF0	; 240
     486:	94 b9       	out	0x04, r25	; 4
     488:	21 15       	cp	r18, r1
     48a:	31 05       	cpc	r19, r1
     48c:	11 f4       	brne	.+4      	; 0x492 <setRowLow+0x12>
     48e:	23 9a       	sbi	0x04, 3	; 4
     490:	08 95       	ret
     492:	21 30       	cpi	r18, 0x01	; 1
     494:	31 05       	cpc	r19, r1
     496:	11 f4       	brne	.+4      	; 0x49c <setRowLow+0x1c>
     498:	22 9a       	sbi	0x04, 2	; 4
     49a:	08 95       	ret
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 05       	cpc	r19, r1
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <setRowLow+0x26>
     4a2:	21 9a       	sbi	0x04, 1	; 4
     4a4:	08 95       	ret
     4a6:	20 9a       	sbi	0x04, 0	; 4
     4a8:	08 95       	ret

000004aa <colPushed>:
     4aa:	4f 9b       	sbis	0x09, 7	; 9
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <colPushed+0x12>
     4ae:	4e 9b       	sbis	0x09, 6	; 9
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <colPushed+0x18>
     4b2:	4d 9b       	sbis	0x09, 5	; 9
     4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <colPushed+0x1e>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	08 95       	ret
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	08 95       	ret
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	08 95       	ret

000004ce <getKeypress>:
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     4da:	00 91 c0 03 	lds	r16, 0x03C0	; 0x8003c0 <__data_end>
     4de:	10 91 c1 03 	lds	r17, 0x03C1	; 0x8003c1 <__data_end+0x1>
     4e2:	20 91 c2 03 	lds	r18, 0x03C2	; 0x8003c2 <__data_end+0x2>
     4e6:	30 91 c3 03 	lds	r19, 0x03C3	; 0x8003c3 <__data_end+0x3>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	80 1b       	sub	r24, r16
     4f0:	91 0b       	sbc	r25, r17
     4f2:	a2 0b       	sbc	r26, r18
     4f4:	b3 0b       	sbc	r27, r19
     4f6:	88 3c       	cpi	r24, 0xC8	; 200
     4f8:	91 05       	cpc	r25, r1
     4fa:	a1 05       	cpc	r26, r1
     4fc:	b1 05       	cpc	r27, r1
     4fe:	c0 f1       	brcs	.+112    	; 0x570 <getKeypress+0xa2>
     500:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     504:	60 93 c0 03 	sts	0x03C0, r22	; 0x8003c0 <__data_end>
     508:	70 93 c1 03 	sts	0x03C1, r23	; 0x8003c1 <__data_end+0x1>
     50c:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end+0x2>
     510:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x3>
     514:	c0 e0       	ldi	r28, 0x00	; 0
     516:	d0 e0       	ldi	r29, 0x00	; 0
     518:	ce 01       	movw	r24, r28
     51a:	0e 94 40 02 	call	0x480	; 0x480 <setRowLow>
     51e:	85 e0       	ldi	r24, 0x05	; 5
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 8e 09 	call	0x131c	; 0x131c <delayms>
     526:	0e 94 55 02 	call	0x4aa	; 0x4aa <colPushed>
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	d9 f0       	breq	.+54     	; 0x564 <getKeypress+0x96>
     52e:	9e 01       	movw	r18, r28
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	c2 0f       	add	r28, r18
     536:	d3 1f       	adc	r29, r19
     538:	c8 0f       	add	r28, r24
     53a:	d9 1f       	adc	r29, r25
     53c:	c8 58       	subi	r28, 0x88	; 136
     53e:	dc 4f       	sbci	r29, 0xFC	; 252
     540:	c8 81       	ld	r28, Y
     542:	1f 92       	push	r1
     544:	cf 93       	push	r28
     546:	81 e5       	ldi	r24, 0x51	; 81
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <printf>
     552:	82 e3       	ldi	r24, 0x32	; 50
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 62 04 	call	0x8c4	; 0x8c4 <beep>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	07 c0       	rjmp	.+14     	; 0x572 <getKeypress+0xa4>
     564:	21 96       	adiw	r28, 0x01	; 1
     566:	c4 30       	cpi	r28, 0x04	; 4
     568:	d1 05       	cpc	r29, r1
     56a:	b1 f6       	brne	.-84     	; 0x518 <getKeypress+0x4a>
     56c:	c0 e0       	ldi	r28, 0x00	; 0
     56e:	01 c0       	rjmp	.+2      	; 0x572 <getKeypress+0xa4>
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	8c 2f       	mov	r24, r28
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <resetAttempts>:
     57e:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <attempts+0x1>
     582:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <attempts>
     586:	08 95       	ret

00000588 <clearKey>:

void clearKey()
{
	pindex = 0; // sets index to 0
     588:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <pindex+0x1>
     58c:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <pindex>
	memset(uentry, 0, sizeof(uentry)); // clears uentry string
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	e7 ef       	ldi	r30, 0xF7	; 247
     594:	f3 e0       	ldi	r31, 0x03	; 3
     596:	df 01       	movw	r26, r30
     598:	1d 92       	st	X+, r1
     59a:	8a 95       	dec	r24
     59c:	e9 f7       	brne	.-6      	; 0x598 <clearKey+0x10>
     59e:	08 95       	ret

000005a0 <runCode>:
}

int runCode()
{
     5a0:	cf 93       	push	r28
	char key = getKeypress();
     5a2:	0e 94 67 02 	call	0x4ce	; 0x4ce <getKeypress>
     5a6:	c8 2f       	mov	r28, r24
	
	if(pindex >= 8) clearKey();
     5a8:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     5ac:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     5b0:	08 97       	sbiw	r24, 0x08	; 8
     5b2:	14 f0       	brlt	.+4      	; 0x5b8 <runCode+0x18>
     5b4:	0e 94 c4 02 	call	0x588	; 0x588 <clearKey>
	
	if(key == '*') // clear
     5b8:	ca 32       	cpi	r28, 0x2A	; 42
     5ba:	29 f4       	brne	.+10     	; 0x5c6 <runCode+0x26>
	{
		clearKey();
     5bc:	0e 94 c4 02 	call	0x588	; 0x588 <clearKey>
	else if(key)
	{
		uentry[pindex] = key;
		pindex++;
	}
	return 0;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	21 c0       	rjmp	.+66     	; 0x608 <runCode+0x68>
	
	if(key == '*') // clear
	{
		clearKey();
	}
	else if((key == '#') && (pindex > 0))
     5c6:	c3 32       	cpi	r28, 0x23	; 35
     5c8:	41 f4       	brne	.+16     	; 0x5da <runCode+0x3a>
     5ca:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     5ce:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     5d2:	18 16       	cp	r1, r24
     5d4:	19 06       	cpc	r1, r25
     5d6:	9c f0       	brlt	.+38     	; 0x5fe <runCode+0x5e>
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <runCode+0x3e>
	{
		return 1;
	}
	else if(key)
     5da:	cc 23       	and	r28, r28
     5dc:	99 f0       	breq	.+38     	; 0x604 <runCode+0x64>
	{
		uentry[pindex] = key;
     5de:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     5e2:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     5e6:	fc 01       	movw	r30, r24
     5e8:	e9 50       	subi	r30, 0x09	; 9
     5ea:	fc 4f       	sbci	r31, 0xFC	; 252
     5ec:	c0 83       	st	Z, r28
		pindex++;
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <pindex+0x1>
     5f4:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <pindex>
	}
	return 0;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <runCode+0x68>
	{
		clearKey();
	}
	else if((key == '#') && (pindex > 0))
	{
		return 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	02 c0       	rjmp	.+4      	; 0x608 <runCode+0x68>
	else if(key)
	{
		uentry[pindex] = key;
		pindex++;
	}
	return 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
}
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <getCodeStr>:

int getCodeStr(char* c)
{
	strcpy(c, uentry);
     60c:	67 ef       	ldi	r22, 0xF7	; 247
     60e:	73 e0       	ldi	r23, 0x03	; 3
     610:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <strcpy>
	return pindex;
	clearKey();
}
     614:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     618:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     61c:	08 95       	ret

0000061e <runKeypad>:

int runKeypad()
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
	char key = getKeypress();
     622:	0e 94 67 02 	call	0x4ce	; 0x4ce <getKeypress>
     626:	c8 2f       	mov	r28, r24
	
	if(pindex >= 8) clearKey(); // reset if too many keys entered
     628:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     62c:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     630:	08 97       	sbiw	r24, 0x08	; 8
     632:	14 f0       	brlt	.+4      	; 0x638 <runKeypad+0x1a>
     634:	0e 94 c4 02 	call	0x588	; 0x588 <clearKey>
	
	if(key == '*') // clear
     638:	ca 32       	cpi	r28, 0x2A	; 42
     63a:	29 f4       	brne	.+10     	; 0x646 <runKeypad+0x28>
	{
		clearKey();
     63c:	0e 94 c4 02 	call	0x588	; 0x588 <clearKey>
		return 0;
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	72 c0       	rjmp	.+228    	; 0x72a <runKeypad+0x10c>
	}
	else if(key == '#') // OK
     646:	c3 32       	cpi	r28, 0x23	; 35
     648:	09 f0       	breq	.+2      	; 0x64c <runKeypad+0x2e>
     64a:	5b c0       	rjmp	.+182    	; 0x702 <runKeypad+0xe4>
	{
		int ret = 0;
		if(strcmp(uentry, dpass) == 0)
     64c:	6e e1       	ldi	r22, 0x1E	; 30
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	87 ef       	ldi	r24, 0xF7	; 247
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <strcmp>
     658:	89 2b       	or	r24, r25
     65a:	39 f4       	brne	.+14     	; 0x66a <runKeypad+0x4c>
		{
			printf("dpass\n");
     65c:	81 e6       	ldi	r24, 0x61	; 97
     65e:	93 e0       	ldi	r25, 0x03	; 3
     660:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			ret = KP_DPASS;
     664:	c1 e0       	ldi	r28, 0x01	; 1
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	3a c0       	rjmp	.+116    	; 0x6de <runKeypad+0xc0>
		}
		else if(strcmp(uentry, cpass) == 0)
     66a:	69 e1       	ldi	r22, 0x19	; 25
     66c:	71 e0       	ldi	r23, 0x01	; 1
     66e:	87 ef       	ldi	r24, 0xF7	; 247
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <strcmp>
     676:	89 2b       	or	r24, r25
     678:	39 f4       	brne	.+14     	; 0x688 <runKeypad+0x6a>
		{
			printf("cpass\n");
     67a:	87 e6       	ldi	r24, 0x67	; 103
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			ret = KP_CPASS;
     682:	c2 e0       	ldi	r28, 0x02	; 2
     684:	d0 e0       	ldi	r29, 0x00	; 0
     686:	2b c0       	rjmp	.+86     	; 0x6de <runKeypad+0xc0>
		}
		else if(strcmp(uentry, ppass) == 0)
     688:	64 e1       	ldi	r22, 0x14	; 20
     68a:	71 e0       	ldi	r23, 0x01	; 1
     68c:	87 ef       	ldi	r24, 0xF7	; 247
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <strcmp>
     694:	89 2b       	or	r24, r25
     696:	39 f4       	brne	.+14     	; 0x6a6 <runKeypad+0x88>
		{
			printf("ppass\n");
     698:	8d e6       	ldi	r24, 0x6D	; 109
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			ret = KP_PPASS;
     6a0:	c3 e0       	ldi	r28, 0x03	; 3
     6a2:	d0 e0       	ldi	r29, 0x00	; 0
     6a4:	1c c0       	rjmp	.+56     	; 0x6de <runKeypad+0xc0>
		}
		else if(strcmp(uentry, apass) == 0)
     6a6:	6f e0       	ldi	r22, 0x0F	; 15
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	87 ef       	ldi	r24, 0xF7	; 247
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <strcmp>
     6b2:	89 2b       	or	r24, r25
     6b4:	39 f4       	brne	.+14     	; 0x6c4 <runKeypad+0xa6>
		{
			printf("apass\n");
     6b6:	83 e7       	ldi	r24, 0x73	; 115
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
			ret = KP_APASS;
     6be:	c4 e0       	ldi	r28, 0x04	; 4
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <runKeypad+0xc0>
		}
		else if (pindex == 0)
     6c4:	c1 e0       	ldi	r28, 0x01	; 1
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     6cc:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     6d0:	89 2b       	or	r24, r25
     6d2:	11 f0       	breq	.+4      	; 0x6d8 <runKeypad+0xba>
     6d4:	c0 e0       	ldi	r28, 0x00	; 0
     6d6:	d0 e0       	ldi	r29, 0x00	; 0
     6d8:	d1 95       	neg	r29
     6da:	c1 95       	neg	r28
     6dc:	d1 09       	sbc	r29, r1
		{
			ret = KP_OK;
		}
		attempts++;
     6de:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <attempts>
     6e2:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <attempts+0x1>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <attempts+0x1>
     6ec:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <attempts>
		if (attempts > 4)
     6f0:	05 97       	sbiw	r24, 0x05	; 5
     6f2:	14 f0       	brlt	.+4      	; 0x6f8 <runKeypad+0xda>
		{
			ret = 0;
     6f4:	c0 e0       	ldi	r28, 0x00	; 0
     6f6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		clearKey();
     6f8:	0e 94 c4 02 	call	0x588	; 0x588 <clearKey>
		return ret;
     6fc:	8c 2f       	mov	r24, r28
     6fe:	9d 2f       	mov	r25, r29
     700:	14 c0       	rjmp	.+40     	; 0x72a <runKeypad+0x10c>
	}
	else if(key) // valid keypress
     702:	cc 23       	and	r28, r28
     704:	81 f0       	breq	.+32     	; 0x726 <runKeypad+0x108>
	{
		uentry[pindex] = key;
     706:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <pindex>
     70a:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <pindex+0x1>
     70e:	fc 01       	movw	r30, r24
     710:	e9 50       	subi	r30, 0x09	; 9
     712:	fc 4f       	sbci	r31, 0xFC	; 252
     714:	c0 83       	st	Z, r28
		pindex++;
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <pindex+0x1>
     71c:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <pindex>
	}
	return 0;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	02 c0       	rjmp	.+4      	; 0x72a <runKeypad+0x10c>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <main>:


int main(void)
{
	// initialize Keypad & timer
	if (DEBUGMODE) init_uart();
     730:	0e 94 c3 09 	call	0x1386	; 0x1386 <init_uart>
	if (ADMINMODE) adminInit();
     734:	0e 94 3c 01 	call	0x278	; 0x278 <adminInit>
	initKeypad();
     738:	0e 94 06 02 	call	0x40c	; 0x40c <initKeypad>
	initTimer();
     73c:	0e 94 24 09 	call	0x1248	; 0x1248 <initTimer>
	
	// initialize LED ports
	DDRC |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4) | (1 << LED5);
     740:	87 b1       	in	r24, 0x07	; 7
     742:	8f 61       	ori	r24, 0x1F	; 31
     744:	87 b9       	out	0x07, r24	; 7
	
	// initialize state
	state = ST_DISARMED;
     746:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
     74a:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
	// main loop
	
	
    while (1) 
    {
		if(state == ST_DISARMED) // Runs in disarmed state
     74e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     752:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     756:	89 2b       	or	r24, r25
     758:	11 f4       	brne	.+4      	; 0x75e <main+0x2e>
		{
			disarmed();
     75a:	0e 94 b0 06 	call	0xd60	; 0xd60 <disarmed>
		}
		if(state == ST_ARMING) // Runs while system is arming
     75e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     762:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	11 f4       	brne	.+4      	; 0x76e <main+0x3e>
		{
			arming();
     76a:	0e 94 ee 06 	call	0xddc	; 0xddc <arming>
		}
		if(state == ST_ARMED) // runs while system is armed
     76e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     772:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     776:	02 97       	sbiw	r24, 0x02	; 2
     778:	11 f4       	brne	.+4      	; 0x77e <main+0x4e>
		{
			armed();
     77a:	0e 94 2b 07 	call	0xe56	; 0xe56 <armed>
		}
		if(state == ST_DETECTED) // runs while system has detected something (30s)
     77e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     782:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     786:	03 97       	sbiw	r24, 0x03	; 3
     788:	11 f4       	brne	.+4      	; 0x78e <main+0x5e>
		{
			detected();
     78a:	0e 94 57 07 	call	0xeae	; 0xeae <detected>
		}
		if(state == ST_PANIC) // runs while system is in panic mode
     78e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     792:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     796:	04 97       	sbiw	r24, 0x04	; 4
     798:	11 f4       	brne	.+4      	; 0x79e <main+0x6e>
		{
			panic();
     79a:	0e 94 b0 07 	call	0xf60	; 0xf60 <panic>
		}
		if(state == ST_ALARMING)
     79e:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     7a2:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     7a6:	05 97       	sbiw	r24, 0x05	; 5
     7a8:	11 f4       	brne	.+4      	; 0x7ae <main+0x7e>
		{
			alarming();
     7aa:	0e 94 bf 07 	call	0xf7e	; 0xf7e <alarming>
		}
		if(state == ST_ADMIN)
     7ae:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     7b2:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     7b6:	06 97       	sbiw	r24, 0x06	; 6
     7b8:	51 f6       	brne	.-108    	; 0x74e <main+0x1e>
		{
			admin();
     7ba:	0e 94 ff 07 	call	0xffe	; 0xffe <admin>
     7be:	c7 cf       	rjmp	.-114    	; 0x74e <main+0x1e>

000007c0 <__vector_11>:
int beepToggle = 0;
void toggleBeep(int freq)
{
	if (beepToggle) startBeep(freq);
	else endBeep();
	beepToggle = !beepToggle;
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <beepT>
     7d6:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <beepT+0x1>
     7da:	89 2b       	or	r24, r25
     7dc:	11 f0       	breq	.+4      	; 0x7e2 <__vector_11+0x22>
     7de:	45 9a       	sbi	0x08, 5	; 8
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__vector_11+0x24>
     7e2:	45 98       	cbi	0x08, 5	; 8
     7e4:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <beepT>
     7e8:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <beepT+0x1>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	23 2b       	or	r18, r19
     7f2:	11 f0       	breq	.+4      	; 0x7f8 <__vector_11+0x38>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <beepT+0x1>
     7fc:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <beepT>
     800:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     804:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     808:	9f 91       	pop	r25
     80a:	8f 91       	pop	r24
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <startBeep>:
     81a:	bc 01       	movw	r22, r24
     81c:	99 0f       	add	r25, r25
     81e:	88 0b       	sbc	r24, r24
     820:	99 0b       	sbc	r25, r25
     822:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	9f e3       	ldi	r25, 0x3F	; 63
     832:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	34 e2       	ldi	r19, 0x24	; 36
     83a:	44 e7       	ldi	r20, 0x74	; 116
     83c:	59 e4       	ldi	r21, 0x49	; 73
     83e:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     84a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     84e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     852:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	86 bb       	out	0x16, r24	; 22
     85a:	3d 9a       	sbi	0x07, 5	; 7
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	88 b9       	out	0x08, r24	; 8
     860:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     870:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     874:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     878:	08 95       	ret

0000087a <endBeep>:
     87a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     87e:	3d 98       	cbi	0x07, 5	; 7
     880:	45 98       	cbi	0x08, 5	; 8
     882:	08 95       	ret

00000884 <dlayu>:
	SOUNDPORT &= ~(1 << SOUNDPORTO);
}

void dlayu(const int t)
{
	for (int i = 0; i < t; i++)
     884:	18 16       	cp	r1, r24
     886:	19 06       	cpc	r1, r25
     888:	5c f4       	brge	.+22     	; 0x8a0 <dlayu+0x1c>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	45 e0       	ldi	r20, 0x05	; 5
     890:	4a 95       	dec	r20
     892:	f1 f7       	brne	.-4      	; 0x890 <dlayu+0xc>
     894:	00 00       	nop
     896:	2f 5f       	subi	r18, 0xFF	; 255
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	82 17       	cp	r24, r18
     89c:	93 07       	cpc	r25, r19
     89e:	b9 f7       	brne	.-18     	; 0x88e <dlayu+0xa>
     8a0:	08 95       	ret

000008a2 <dlaym>:
	}
}

void dlaym(const int t)
{
	for (int i = 0; i < t; i++)
     8a2:	18 16       	cp	r1, r24
     8a4:	19 06       	cpc	r1, r25
     8a6:	6c f4       	brge	.+26     	; 0x8c2 <dlaym+0x20>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ac:	ef e9       	ldi	r30, 0x9F	; 159
     8ae:	ff e0       	ldi	r31, 0x0F	; 15
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <dlaym+0xe>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <dlaym+0x14>
     8b6:	00 00       	nop
     8b8:	2f 5f       	subi	r18, 0xFF	; 255
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	a9 f7       	brne	.-22     	; 0x8ac <dlaym+0xa>
     8c2:	08 95       	ret

000008c4 <beep>:
		_delay_ms(1);
	}
}

void beep(int t)
{
     8c4:	8f 92       	push	r8
     8c6:	9f 92       	push	r9
     8c8:	af 92       	push	r10
     8ca:	bf 92       	push	r11
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	cf 93       	push	r28
     8d6:	6c 01       	movw	r12, r24
	SOUNDPORTDD |= (1 << SOUNDPORTO);
     8d8:	3d 9a       	sbi	0x07, 5	; 7
	unsigned long int initT = timems();
     8da:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     8de:	4b 01       	movw	r8, r22
     8e0:	5c 01       	movw	r10, r24
	while((timems() - initT) < t)
     8e2:	0d 2c       	mov	r0, r13
     8e4:	00 0c       	add	r0, r0
     8e6:	ee 08       	sbc	r14, r14
     8e8:	ff 08       	sbc	r15, r15
	{
		SOUNDPORT ^= (1 << SOUNDPORTO);
     8ea:	c0 e2       	ldi	r28, 0x20	; 32

void beep(int t)
{
	SOUNDPORTDD |= (1 << SOUNDPORTO);
	unsigned long int initT = timems();
	while((timems() - initT) < t)
     8ec:	09 c0       	rjmp	.+18     	; 0x900 <__stack+0x1>
	{
		SOUNDPORT ^= (1 << SOUNDPORTO);
     8ee:	88 b1       	in	r24, 0x08	; 8
     8f0:	8c 27       	eor	r24, r28
     8f2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f4:	8f ec       	ldi	r24, 0xCF	; 207
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <beep+0x34>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <beep+0x3a>
     8fe:	00 00       	nop

void beep(int t)
{
	SOUNDPORTDD |= (1 << SOUNDPORTO);
	unsigned long int initT = timems();
	while((timems() - initT) < t)
     900:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	88 19       	sub	r24, r8
     90a:	99 09       	sbc	r25, r9
     90c:	aa 09       	sbc	r26, r10
     90e:	bb 09       	sbc	r27, r11
     910:	8c 15       	cp	r24, r12
     912:	9d 05       	cpc	r25, r13
     914:	ae 05       	cpc	r26, r14
     916:	bf 05       	cpc	r27, r15
     918:	50 f3       	brcs	.-44     	; 0x8ee <beep+0x2a>
	{
		SOUNDPORT ^= (1 << SOUNDPORTO);
		_delay_us(500);
	}
}
     91a:	cf 91       	pop	r28
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	bf 90       	pop	r11
     926:	af 90       	pop	r10
     928:	9f 90       	pop	r9
     92a:	8f 90       	pop	r8
     92c:	08 95       	ret

0000092e <beepN>:

void beepN(int t, int n)
{
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
	for (int i = 0; i < n; i++)
     93a:	16 16       	cp	r1, r22
     93c:	17 06       	cpc	r1, r23
     93e:	74 f4       	brge	.+28     	; 0x95c <beepN+0x2e>
     940:	7b 01       	movw	r14, r22
     942:	8c 01       	movw	r16, r24
     944:	c0 e0       	ldi	r28, 0x00	; 0
     946:	d0 e0       	ldi	r29, 0x00	; 0
	{
		beep(t);
     948:	c8 01       	movw	r24, r16
     94a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <beep>
		dlaym(t);
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 51 04 	call	0x8a2	; 0x8a2 <dlaym>
	}
}

void beepN(int t, int n)
{
	for (int i = 0; i < n; i++)
     954:	21 96       	adiw	r28, 0x01	; 1
     956:	ec 16       	cp	r14, r28
     958:	fd 06       	cpc	r15, r29
     95a:	b1 f7       	brne	.-20     	; 0x948 <beepN+0x1a>
	{
		beep(t);
		dlaym(t);
	}
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	08 95       	ret

0000096a <beepHz>:

void beepHz(int f, int t)
{
     96a:	8f 92       	push	r8
     96c:	9f 92       	push	r9
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
     982:	6b 01       	movw	r12, r22
	SOUNDPORTDD |= (1 << SOUNDPORTO);
     984:	3d 9a       	sbi	0x07, 5	; 7
	unsigned long int initT = timems();
     986:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     98a:	4b 01       	movw	r8, r22
     98c:	5c 01       	movw	r10, r24
	int waitP = (int)(1. / (double)f * 1E6 / 2.);
     98e:	be 01       	movw	r22, r28
     990:	dd 0f       	add	r29, r29
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	9f e3       	ldi	r25, 0x3F	; 63
     9a6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	34 e2       	ldi	r19, 0x24	; 36
     9ae:	44 e7       	ldi	r20, 0x74	; 116
     9b0:	59 e4       	ldi	r21, 0x49	; 73
     9b2:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     9c2:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     9c6:	eb 01       	movw	r28, r22
	
	while((timems() - initT) < t)
     9c8:	0d 2c       	mov	r0, r13
     9ca:	00 0c       	add	r0, r0
     9cc:	ee 08       	sbc	r14, r14
     9ce:	ff 08       	sbc	r15, r15
	{
		SOUNDPORT ^= (1 << SOUNDPORTO);
     9d0:	10 e2       	ldi	r17, 0x20	; 32
{
	SOUNDPORTDD |= (1 << SOUNDPORTO);
	unsigned long int initT = timems();
	int waitP = (int)(1. / (double)f * 1E6 / 2.);
	
	while((timems() - initT) < t)
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <beepHz+0x76>
	{
		SOUNDPORT ^= (1 << SOUNDPORTO);
     9d4:	88 b1       	in	r24, 0x08	; 8
     9d6:	81 27       	eor	r24, r17
     9d8:	88 b9       	out	0x08, r24	; 8
		dlayu(waitP);
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 42 04 	call	0x884	; 0x884 <dlayu>
{
	SOUNDPORTDD |= (1 << SOUNDPORTO);
	unsigned long int initT = timems();
	int waitP = (int)(1. / (double)f * 1E6 / 2.);
	
	while((timems() - initT) < t)
     9e0:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	88 19       	sub	r24, r8
     9ea:	99 09       	sbc	r25, r9
     9ec:	aa 09       	sbc	r26, r10
     9ee:	bb 09       	sbc	r27, r11
     9f0:	8c 15       	cp	r24, r12
     9f2:	9d 05       	cpc	r25, r13
     9f4:	ae 05       	cpc	r26, r14
     9f6:	bf 05       	cpc	r27, r15
     9f8:	68 f3       	brcs	.-38     	; 0x9d4 <beepHz+0x6a>
	{
		SOUNDPORT ^= (1 << SOUNDPORTO);
		dlayu(waitP);
	}
	SOUNDPORT &= ~(1 << SOUNDPORTO);
     9fa:	45 98       	cbi	0x08, 5	; 8
	SOUNDPORTDD &= ~(1 << SOUNDPORTO);
     9fc:	3d 98       	cbi	0x07, 5	; 7
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	08 95       	ret

00000a16 <getFreqFromNote>:
float notes[12] = {440.00, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61};
char noteL[12] = {'A', 'a', 'B', 'C', 'c', 'D', 'd', 'E', 'F', 'f', 'G', 'g'};
 

int getFreqFromNote(const char note[2])
{
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
	char base = note[0];
     a1e:	fc 01       	movw	r30, r24
     a20:	30 81       	ld	r19, Z
	int num = note[1] - '0'; // c hack
     a22:	61 81       	ldd	r22, Z+1	; 0x01
     a24:	70 e0       	ldi	r23, 0x00	; 0
	
	int i = 0;
	while (noteL[i] != base) i++; // get proper note
     a26:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <noteL>
     a2a:	38 17       	cp	r19, r24
     a2c:	49 f0       	breq	.+18     	; 0xa40 <getFreqFromNote+0x2a>
     a2e:	e8 e8       	ldi	r30, 0x88	; 136
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	21 91       	ld	r18, Z+
     a3a:	32 13       	cpse	r19, r18
     a3c:	fc cf       	rjmp	.-8      	; 0xa36 <getFreqFromNote+0x20>
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <getFreqFromNote+0x2e>
int getFreqFromNote(const char note[2])
{
	char base = note[0];
	int num = note[1] - '0'; // c hack
	
	int i = 0;
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
	while (noteL[i] != base) i++; // get proper note
	
	float basefreq = notes[i];
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	fc 01       	movw	r30, r24
     a4e:	ed 56       	subi	r30, 0x6D	; 109
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	c0 80       	ld	r12, Z
     a54:	d1 80       	ldd	r13, Z+1	; 0x01
     a56:	e2 80       	ldd	r14, Z+2	; 0x02
     a58:	f3 80       	ldd	r15, Z+3	; 0x03
	basefreq = basefreq * pow(2, num - 4);
     a5a:	64 53       	subi	r22, 0x34	; 52
     a5c:	71 09       	sbc	r23, r1
     a5e:	07 2e       	mov	r0, r23
     a60:	00 0c       	add	r0, r0
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e4       	ldi	r25, 0x40	; 64
     a76:	0e 94 a4 0c 	call	0x1948	; 0x1948 <pow>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24

	return (int)basefreq;
     a7e:	c7 01       	movw	r24, r14
     a80:	b6 01       	movw	r22, r12
     a82:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     a86:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
}
     a8a:	cb 01       	movw	r24, r22
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	08 95       	ret

00000a96 <playSong>:
							 {"A6", 8}, {"A6", 8}, {"A6", 8}, {"E5", 4}, {"D5", 4}, {"f5", 4}, {"f5", 4}, {"f5", 8}, {"E5", 8}, {"E5", 8}, {"f5", 8}, {"E5", 8}};

int songLen = 24;
int tempo = 169;
void playSong()
{
     a96:	4f 92       	push	r4
     a98:	5f 92       	push	r5
     a9a:	6f 92       	push	r6
     a9c:	7f 92       	push	r7
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
	// play staccato (half on, half rest)
	
	float beat = 60. / (float)tempo * 4;
     ab2:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <tempo>
     ab6:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <tempo+0x1>
     aba:	07 2e       	mov	r0, r23
     abc:	00 0c       	add	r0, r0
     abe:	88 0b       	sbc	r24, r24
     ac0:	99 0b       	sbc	r25, r25
     ac2:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e7       	ldi	r24, 0x70	; 112
     ad0:	92 e4       	ldi	r25, 0x42	; 66
     ad2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e8       	ldi	r20, 0x80	; 128
     adc:	50 e4       	ldi	r21, 0x40	; 64
     ade:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     ae2:	2b 01       	movw	r4, r22
     ae4:	3c 01       	movw	r6, r24
     ae6:	68 94       	set
     ae8:	aa 24       	eor	r10, r10
     aea:	a1 f8       	bld	r10, 1
     aec:	b1 2c       	mov	r11, r1
     aee:	35 c0       	rjmp	.+106    	; 0xb5a <playSong+0xc4>
	for (int j = 0; j < 2; j++) // play it twice!
	{
		for (int i = 0; i < songLen; i++)
		{
			float delayTime = beat / (float)song[i].nsize * 1000. / 2;
			beepHz(getFreqFromNote(song[i].note), (int)delayTime);
     af0:	6a 81       	ldd	r22, Y+2	; 0x02
     af2:	7b 81       	ldd	r23, Y+3	; 0x03
     af4:	07 2e       	mov	r0, r23
     af6:	00 0c       	add	r0, r0
     af8:	88 0b       	sbc	r24, r24
     afa:	99 0b       	sbc	r25, r25
     afc:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c3 01       	movw	r24, r6
     b06:	b2 01       	movw	r22, r4
     b08:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	4a e7       	ldi	r20, 0x7A	; 122
     b12:	54 e4       	ldi	r21, 0x44	; 68
     b14:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     b24:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
     b28:	6b 01       	movw	r12, r22
     b2a:	7c 01       	movw	r14, r24
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 0b 05 	call	0xa16	; 0xa16 <getFreqFromNote>
     b32:	b6 01       	movw	r22, r12
     b34:	0e 94 b5 04 	call	0x96a	; 0x96a <beepHz>
			dlaym((int)delayTime);
     b38:	c6 01       	movw	r24, r12
     b3a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <dlaym>
	
	float beat = 60. / (float)tempo * 4;
	
	for (int j = 0; j < 2; j++) // play it twice!
	{
		for (int i = 0; i < songLen; i++)
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	24 96       	adiw	r28, 0x04	; 4
     b44:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <songLen>
     b48:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <songLen+0x1>
     b4c:	08 17       	cp	r16, r24
     b4e:	19 07       	cpc	r17, r25
     b50:	7c f2       	brlt	.-98     	; 0xaf0 <playSong+0x5a>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	a8 1a       	sub	r10, r24
     b56:	b1 08       	sbc	r11, r1
{
	// play staccato (half on, half rest)
	
	float beat = 60. / (float)tempo * 4;
	
	for (int j = 0; j < 2; j++) // play it twice!
     b58:	61 f0       	breq	.+24     	; 0xb72 <playSong+0xdc>
	{
		for (int i = 0; i < songLen; i++)
     b5a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <songLen>
     b5e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <songLen+0x1>
     b62:	18 16       	cp	r1, r24
     b64:	19 06       	cpc	r1, r25
     b66:	ac f7       	brge	.-22     	; 0xb52 <playSong+0xbc>
     b68:	c7 e2       	ldi	r28, 0x27	; 39
     b6a:	d1 e0       	ldi	r29, 0x01	; 1
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	bf cf       	rjmp	.-130    	; 0xaf0 <playSong+0x5a>
			float delayTime = beat / (float)song[i].nsize * 1000. / 2;
			beepHz(getFreqFromNote(song[i].note), (int)delayTime);
			dlaym((int)delayTime);
		}
	}
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	7f 90       	pop	r7
     b88:	6f 90       	pop	r6
     b8a:	5f 90       	pop	r5
     b8c:	4f 90       	pop	r4
     b8e:	08 95       	ret

00000b90 <startSong>:
int playingSongNote = 0;
int songStart = 0;
unsigned long int playingSongNoteStart = 0;
void startSong()
{
	playingSongNote = 0;
     b90:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <playingSongNote+0x1>
     b94:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <playingSongNote>
	songStart = 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <songStart+0x1>
     ba0:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <songStart>
     ba4:	08 95       	ret

00000ba6 <endSong>:
}

void endSong()
{
	endBeep();
     ba6:	0e 94 3d 04 	call	0x87a	; 0x87a <endBeep>
     baa:	08 95       	ret

00000bac <playingSong>:
}

void playingSong()
{
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
	float beat = 60. / (float)tempo;
	float noteLen = beat * 4. / (float)song[playingSongNote].nsize * 1000.;
     bc4:	c0 91 ce 03 	lds	r28, 0x03CE	; 0x8003ce <playingSongNote>
     bc8:	d0 91 cf 03 	lds	r29, 0x03CF	; 0x8003cf <playingSongNote+0x1>
	
	if (playingSongNote >= 24)
     bcc:	c8 31       	cpi	r28, 0x18	; 24
     bce:	d1 05       	cpc	r29, r1
     bd0:	1c f0       	brlt	.+6      	; 0xbd8 <playingSong+0x2c>
	{
		startSong();
     bd2:	0e 94 c8 05 	call	0xb90	; 0xb90 <startSong>
     bd6:	b7 c0       	rjmp	.+366    	; 0xd46 <playingSong+0x19a>
}

void playingSong()
{
	float beat = 60. / (float)tempo;
	float noteLen = beat * 4. / (float)song[playingSongNote].nsize * 1000.;
     bd8:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <tempo>
     bdc:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <tempo+0x1>
     be0:	07 2e       	mov	r0, r23
     be2:	00 0c       	add	r0, r0
     be4:	88 0b       	sbc	r24, r24
     be6:	99 0b       	sbc	r25, r25
     be8:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	80 e7       	ldi	r24, 0x70	; 112
     bf6:	92 e4       	ldi	r25, 0x42	; 66
     bf8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	50 e4       	ldi	r21, 0x40	; 64
     c04:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     c08:	6b 01       	movw	r12, r22
     c0a:	7c 01       	movw	r14, r24
     c0c:	cc 0f       	add	r28, r28
     c0e:	dd 1f       	adc	r29, r29
     c10:	cc 0f       	add	r28, r28
     c12:	dd 1f       	adc	r29, r29
     c14:	c9 5d       	subi	r28, 0xD9	; 217
     c16:	de 4f       	sbci	r29, 0xFE	; 254
     c18:	6a 81       	ldd	r22, Y+2	; 0x02
     c1a:	7b 81       	ldd	r23, Y+3	; 0x03
     c1c:	07 2e       	mov	r0, r23
     c1e:	00 0c       	add	r0, r0
     c20:	88 0b       	sbc	r24, r24
     c22:	99 0b       	sbc	r25, r25
     c24:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
     c28:	9b 01       	movw	r18, r22
     c2a:	ac 01       	movw	r20, r24
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	54 e4       	ldi	r21, 0x44	; 68
     c3c:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
	
	if (playingSongNote >= 24)
	{
		startSong();
	}
	else if ((timems() - playingSongNoteStart) > noteLen) // note is complete
     c44:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     c48:	00 91 c8 03 	lds	r16, 0x03C8	; 0x8003c8 <playingSongNoteStart>
     c4c:	10 91 c9 03 	lds	r17, 0x03C9	; 0x8003c9 <playingSongNoteStart+0x1>
     c50:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <playingSongNoteStart+0x2>
     c54:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <playingSongNoteStart+0x3>
     c58:	60 1b       	sub	r22, r16
     c5a:	71 0b       	sbc	r23, r17
     c5c:	82 0b       	sbc	r24, r18
     c5e:	93 0b       	sbc	r25, r19
     c60:	0e 94 80 0b 	call	0x1700	; 0x1700 <__floatunsisf>
     c64:	9b 01       	movw	r18, r22
     c66:	ac 01       	movw	r20, r24
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__cmpsf2>
     c70:	88 23       	and	r24, r24
     c72:	14 f5       	brge	.+68     	; 0xcb8 <playingSong+0x10c>
	{
		playingSongNote++;
     c74:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <playingSongNote>
     c78:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <playingSongNote+0x1>
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <playingSongNote+0x1>
     c82:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <playingSongNote>
		playingSongNoteStart = timems();
     c86:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     c8a:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <playingSongNoteStart>
     c8e:	70 93 c9 03 	sts	0x03C9, r23	; 0x8003c9 <playingSongNoteStart+0x1>
     c92:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <playingSongNoteStart+0x2>
     c96:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <playingSongNoteStart+0x3>
		startBeep(getFreqFromNote(song[playingSongNote].note));
     c9a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <playingSongNote>
     c9e:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <playingSongNote+0x1>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	89 5d       	subi	r24, 0xD9	; 217
     cac:	9e 4f       	sbci	r25, 0xFE	; 254
     cae:	0e 94 0b 05 	call	0xa16	; 0xa16 <getFreqFromNote>
     cb2:	0e 94 0d 04 	call	0x81a	; 0x81a <startBeep>
     cb6:	47 c0       	rjmp	.+142    	; 0xd46 <playingSong+0x19a>
	}
	else if((timems() - playingSongNoteStart) > (noteLen / 2))
     cb8:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     cbc:	00 91 c8 03 	lds	r16, 0x03C8	; 0x8003c8 <playingSongNoteStart>
     cc0:	10 91 c9 03 	lds	r17, 0x03C9	; 0x8003c9 <playingSongNoteStart+0x1>
     cc4:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <playingSongNoteStart+0x2>
     cc8:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <playingSongNoteStart+0x3>
     ccc:	60 1b       	sub	r22, r16
     cce:	71 0b       	sbc	r23, r17
     cd0:	82 0b       	sbc	r24, r18
     cd2:	93 0b       	sbc	r25, r19
     cd4:	0e 94 80 0b 	call	0x1700	; 0x1700 <__floatunsisf>
     cd8:	4b 01       	movw	r8, r22
     cda:	5c 01       	movw	r10, r24
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	c5 01       	movw	r24, r10
     cf2:	b4 01       	movw	r22, r8
     cf4:	0e 94 32 0c 	call	0x1864	; 0x1864 <__gesf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	1c f4       	brge	.+6      	; 0xd02 <playingSong+0x156>
	{
		endBeep();
     cfc:	0e 94 3d 04 	call	0x87a	; 0x87a <endBeep>
     d00:	22 c0       	rjmp	.+68     	; 0xd46 <playingSong+0x19a>
	}
	else if(songStart)
     d02:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <songStart>
     d06:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <songStart+0x1>
     d0a:	89 2b       	or	r24, r25
     d0c:	e1 f0       	breq	.+56     	; 0xd46 <playingSong+0x19a>
	{
		playingSongNoteStart = timems();
     d0e:	0e 94 40 09 	call	0x1280	; 0x1280 <timems>
     d12:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <playingSongNoteStart>
     d16:	70 93 c9 03 	sts	0x03C9, r23	; 0x8003c9 <playingSongNoteStart+0x1>
     d1a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <playingSongNoteStart+0x2>
     d1e:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <playingSongNoteStart+0x3>
		songStart = 0;
     d22:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <songStart+0x1>
     d26:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <songStart>
		startBeep(getFreqFromNote(song[playingSongNote].note));
     d2a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <playingSongNote>
     d2e:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <playingSongNote+0x1>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	89 5d       	subi	r24, 0xD9	; 217
     d3c:	9e 4f       	sbci	r25, 0xFE	; 254
     d3e:	0e 94 0b 05 	call	0xa16	; 0xa16 <getFreqFromNote>
     d42:	0e 94 0d 04 	call	0x81a	; 0x81a <startBeep>
	}
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	bf 90       	pop	r11
     d58:	af 90       	pop	r10
     d5a:	9f 90       	pop	r9
     d5c:	8f 90       	pop	r8
     d5e:	08 95       	ret

00000d60 <disarmed>:
int curatormode = 0;

void disarmed(void)
{
	// turn on disarmed led
	PORTLED |= (1 << LED1);
     d60:	40 9a       	sbi	0x08, 0	; 8
	PORTLED &= ~((1 << LED2) | (1 << LED3) | (1 << LED4) | (1 << LED5));
     d62:	88 b1       	in	r24, 0x08	; 8
     d64:	81 7e       	andi	r24, 0xE1	; 225
     d66:	88 b9       	out	0x08, r24	; 8
	
	// check for artifact removal
	if(detectHallEffect() && !curatormode)
     d68:	0e 94 ff 01 	call	0x3fe	; 0x3fe <detectHallEffect>
     d6c:	89 2b       	or	r24, r25
     d6e:	61 f0       	breq	.+24     	; 0xd88 <disarmed+0x28>
     d70:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <curatormode>
     d74:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <curatormode+0x1>
     d78:	89 2b       	or	r24, r25
     d7a:	31 f4       	brne	.+12     	; 0xd88 <disarmed+0x28>
	{
		state = ST_ALARMING;
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     d84:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
	}
	
	resetAttempts();
     d88:	0e 94 bf 02 	call	0x57e	; 0x57e <resetAttempts>
	
	int k = runKeypad();
     d8c:	0e 94 0f 03 	call	0x61e	; 0x61e <runKeypad>
	if (k == KP_OK) state = ST_ARMING;
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	92 07       	cpc	r25, r18
     d96:	39 f4       	brne	.+14     	; 0xda6 <disarmed+0x46>
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     da0:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
     da4:	08 95       	ret
	else if (k == KP_CPASS) curatormode = !curatormode; // toggle curator mode
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	91 05       	cpc	r25, r1
     daa:	79 f4       	brne	.+30     	; 0xdca <disarmed+0x6a>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <curatormode>
     db4:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <curatormode+0x1>
     db8:	23 2b       	or	r18, r19
     dba:	11 f0       	breq	.+4      	; 0xdc0 <disarmed+0x60>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <curatormode+0x1>
     dc4:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <curatormode>
     dc8:	08 95       	ret
	else if (k == KP_APASS) state = ST_ADMIN;
     dca:	04 97       	sbiw	r24, 0x04	; 4
     dcc:	31 f4       	brne	.+12     	; 0xdda <disarmed+0x7a>
     dce:	86 e0       	ldi	r24, 0x06	; 6
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     dd6:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
     dda:	08 95       	ret

00000ddc <arming>:
}

void arming(void)
{
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
	timerSet();
     de2:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
	int i = 200;
     de6:	c8 ec       	ldi	r28, 0xC8	; 200
     de8:	d0 e0       	ldi	r29, 0x00	; 0
	while(!timersecT(15)) // delays for 15s
	{
		if(timermsT(i)) // blinks disarmed/arming led with 400ms period
		{
			PORTLED ^= (1 << LED1);  // toggles LED
     dea:	11 e0       	ldi	r17, 0x01	; 1

void arming(void)
{
	timerSet();
	int i = 200;
	while(!timersecT(15)) // delays for 15s
     dec:	1b c0       	rjmp	.+54     	; 0xe24 <arming+0x48>
	{
		if(timermsT(i)) // blinks disarmed/arming led with 400ms period
     dee:	be 01       	movw	r22, r28
     df0:	0d 2e       	mov	r0, r29
     df2:	00 0c       	add	r0, r0
     df4:	88 0b       	sbc	r24, r24
     df6:	99 0b       	sbc	r25, r25
     df8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
     dfc:	89 2b       	or	r24, r25
     dfe:	49 f0       	breq	.+18     	; 0xe12 <arming+0x36>
		{
			PORTLED ^= (1 << LED1);  // toggles LED
     e00:	88 b1       	in	r24, 0x08	; 8
     e02:	81 27       	eor	r24, r17
     e04:	88 b9       	out	0x08, r24	; 8
			beep(50); // beep
     e06:	82 e3       	ldi	r24, 0x32	; 50
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <beep>
			i += 200; // increment by 200ms
     e0e:	c8 53       	subi	r28, 0x38	; 56
     e10:	df 4f       	sbci	r29, 0xFF	; 255
		}
		int k = runKeypad();
     e12:	0e 94 0f 03 	call	0x61e	; 0x61e <runKeypad>
		if (k == KP_OK) 
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	29 f4       	brne	.+10     	; 0xe24 <arming+0x48>
		{
			state = ST_DISARMED; // cancel turning on alarm
     e1a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
     e1e:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
			return;
     e22:	15 c0       	rjmp	.+42     	; 0xe4e <arming+0x72>

void arming(void)
{
	timerSet();
	int i = 200;
	while(!timersecT(15)) // delays for 15s
     e24:	6f e0       	ldi	r22, 0x0F	; 15
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <timersecT>
     e30:	89 2b       	or	r24, r25
     e32:	e9 f2       	breq	.-70     	; 0xdee <arming+0x12>
			state = ST_DISARMED; // cancel turning on alarm
			return;
		}
	}
	
	beepN(50, 3);
     e34:	63 e0       	ldi	r22, 0x03	; 3
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	82 e3       	ldi	r24, 0x32	; 50
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 97 04 	call	0x92e	; 0x92e <beepN>
	state = ST_ARMED; // Changes state from arming to armed
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     e48:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
	
	PORTLED &= ~(1 << LED1); // turns off arming LED
     e4c:	40 98       	cbi	0x08, 0	; 8
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	08 95       	ret

00000e56 <armed>:

void armed(void)
{
	PORTLED |= (1 << LED2); //turns on armed LED
     e56:	41 9a       	sbi	0x08, 1	; 8
	
	if(PIND & (1 << PIND4)) //Checks for PIR detection
     e58:	4c 9b       	sbis	0x09, 4	; 9
     e5a:	06 c0       	rjmp	.+12     	; 0xe68 <armed+0x12>
	{
		//state = ST_ALARMING; // changes state from armed to alarming
		state = ST_DETECTED;
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     e64:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
	{
		state = ST_DETECTED;
	}*/
	
	// check for artifact removal
	if(detectHallEffect() && !curatormode)
     e68:	0e 94 ff 01 	call	0x3fe	; 0x3fe <detectHallEffect>
     e6c:	89 2b       	or	r24, r25
     e6e:	61 f0       	breq	.+24     	; 0xe88 <armed+0x32>
     e70:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <curatormode>
     e74:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <curatormode+0x1>
     e78:	89 2b       	or	r24, r25
     e7a:	31 f4       	brne	.+12     	; 0xe88 <armed+0x32>
	{
		state = ST_ALARMING;
     e7c:	85 e0       	ldi	r24, 0x05	; 5
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     e84:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
	}
	
	int k = runKeypad();
     e88:	0e 94 0f 03 	call	0x61e	; 0x61e <runKeypad>
	if (k == KP_DPASS) state = ST_DISARMED;
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	29 f4       	brne	.+10     	; 0xe9c <armed+0x46>
     e92:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
     e96:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
     e9a:	08 95       	ret
	else if (k == KP_PPASS) state = ST_PANIC;
     e9c:	03 97       	sbiw	r24, 0x03	; 3
     e9e:	31 f4       	brne	.+12     	; 0xeac <armed+0x56>
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     ea8:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
     eac:	08 95       	ret

00000eae <detected>:
	
	
}

void detected(void)
{
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
	PORTLED &= ~(1 << LED2); // turn off armed LED
     eb4:	41 98       	cbi	0x08, 1	; 8
	timerSet(0);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
	int i = 200;
     ebe:	c8 ec       	ldi	r28, 0xC8	; 200
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
	while(!timersecT(30))
	{
		if(timermsT(i)) // blinks disarmed/arming led with 400ms period
		{
			PORTLED ^= (1 << LED3);  // toggles LED
     ec2:	14 e0       	ldi	r17, 0x04	; 4
void detected(void)
{
	PORTLED &= ~(1 << LED2); // turn off armed LED
	timerSet(0);
	int i = 200;
	while(!timersecT(30))
     ec4:	39 c0       	rjmp	.+114    	; 0xf38 <detected+0x8a>
	{
		if(timermsT(i)) // blinks disarmed/arming led with 400ms period
     ec6:	be 01       	movw	r22, r28
     ec8:	0d 2e       	mov	r0, r29
     eca:	00 0c       	add	r0, r0
     ecc:	88 0b       	sbc	r24, r24
     ece:	99 0b       	sbc	r25, r25
     ed0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
     ed4:	89 2b       	or	r24, r25
     ed6:	29 f0       	breq	.+10     	; 0xee2 <detected+0x34>
		{
			PORTLED ^= (1 << LED3);  // toggles LED
     ed8:	88 b1       	in	r24, 0x08	; 8
     eda:	81 27       	eor	r24, r17
     edc:	88 b9       	out	0x08, r24	; 8
			i += 200;
     ede:	c8 53       	subi	r28, 0x38	; 56
     ee0:	df 4f       	sbci	r29, 0xFF	; 255
		}
		
		int k = runKeypad();
     ee2:	0e 94 0f 03 	call	0x61e	; 0x61e <runKeypad>
		if (k == KP_DPASS) state = ST_DISARMED;
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	29 f4       	brne	.+10     	; 0xef6 <detected+0x48>
     eec:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
     ef0:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
     ef4:	31 c0       	rjmp	.+98     	; 0xf58 <detected+0xaa>
		if (k == KP_PPASS) state = ST_PANIC;
     ef6:	03 97       	sbiw	r24, 0x03	; 3
     ef8:	39 f4       	brne	.+14     	; 0xf08 <detected+0x5a>
     efa:	84 e0       	ldi	r24, 0x04	; 4
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     f02:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
     f06:	28 c0       	rjmp	.+80     	; 0xf58 <detected+0xaa>
		
		if((state == ST_DISARMED) | (state == ST_PANIC)) return;
     f08:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <state>
     f0c:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <state+0x1>
     f10:	8b 7f       	andi	r24, 0xFB	; 251
     f12:	89 2b       	or	r24, r25
     f14:	09 f1       	breq	.+66     	; 0xf58 <detected+0xaa>
		
		// check for artifact removal
		if(detectHallEffect() && !curatormode)
     f16:	0e 94 ff 01 	call	0x3fe	; 0x3fe <detectHallEffect>
     f1a:	89 2b       	or	r24, r25
     f1c:	69 f0       	breq	.+26     	; 0xf38 <detected+0x8a>
     f1e:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <curatormode>
     f22:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <curatormode+0x1>
     f26:	89 2b       	or	r24, r25
     f28:	39 f4       	brne	.+14     	; 0xf38 <detected+0x8a>
		{
			state = ST_ALARMING;
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     f32:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
			return;
     f36:	10 c0       	rjmp	.+32     	; 0xf58 <detected+0xaa>
void detected(void)
{
	PORTLED &= ~(1 << LED2); // turn off armed LED
	timerSet(0);
	int i = 200;
	while(!timersecT(30))
     f38:	6e e1       	ldi	r22, 0x1E	; 30
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 69 09 	call	0x12d2	; 0x12d2 <timersecT>
     f44:	89 2b       	or	r24, r25
     f46:	09 f4       	brne	.+2      	; 0xf4a <detected+0x9c>
     f48:	be cf       	rjmp	.-132    	; 0xec6 <detected+0x18>
			return;
		}
	}
	
	
	PORTLED &= ~(1 << LED3);
     f4a:	42 98       	cbi	0x08, 2	; 8
	state = ST_ALARMING; // alarm
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     f54:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	08 95       	ret

00000f60 <panic>:

void panic(void)
{
	PORTLED &= ~((1 << LED2) | (1 << LED3) | (1 << LED4)); // turn off others
     f60:	88 b1       	in	r24, 0x08	; 8
     f62:	81 7f       	andi	r24, 0xF1	; 241
     f64:	88 b9       	out	0x08, r24	; 8
	PORTLED |= (1 << LED1) | (1 << LED5); // turn on disarmed led and silent alarm LED
     f66:	88 b1       	in	r24, 0x08	; 8
     f68:	81 61       	ori	r24, 0x11	; 17
     f6a:	88 b9       	out	0x08, r24	; 8
	
	int k = runKeypad();
     f6c:	0e 94 0f 03 	call	0x61e	; 0x61e <runKeypad>
	if (k == KP_DPASS) state = ST_DISARMED;
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	21 f4       	brne	.+8      	; 0xf7c <panic+0x1c>
     f74:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
     f78:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
     f7c:	08 95       	ret

00000f7e <alarming>:
}

int alarmOn = 0;
void alarming(void)
{
	if(alarmOn == 0)
     f7e:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <alarmOn>
     f82:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <alarmOn+0x1>
     f86:	89 2b       	or	r24, r25
     f88:	41 f4       	brne	.+16     	; 0xf9a <alarming+0x1c>
	{
		startSong();
     f8a:	0e 94 c8 05 	call	0xb90	; 0xb90 <startSong>
		alarmOn = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <alarmOn+0x1>
     f96:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <alarmOn>
	}
	PORTLED &= ~((1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED5)); // turn off others
     f9a:	88 b1       	in	r24, 0x08	; 8
     f9c:	88 7e       	andi	r24, 0xE8	; 232
     f9e:	88 b9       	out	0x08, r24	; 8
	if(timermsT(50)) // blinks disarmed/arming led with 100ms period
     fa0:	62 e3       	ldi	r22, 0x32	; 50
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
     fac:	89 2b       	or	r24, r25
     fae:	31 f0       	breq	.+12     	; 0xfbc <alarming+0x3e>
	{
		timerSet();
     fb0:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
		PORTLED ^= (1 << LED4);  // toggles LED
     fb4:	98 b1       	in	r25, 0x08	; 8
     fb6:	88 e0       	ldi	r24, 0x08	; 8
     fb8:	89 27       	eor	r24, r25
     fba:	88 b9       	out	0x08, r24	; 8
	}
	
	playingSong();
     fbc:	0e 94 d6 05 	call	0xbac	; 0xbac <playingSong>
	
	int k = runKeypad();
     fc0:	0e 94 0f 03 	call	0x61e	; 0x61e <runKeypad>
	if (k == KP_DPASS) 
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f4       	brne	.+22     	; 0xfe0 <alarming+0x62>
	{
		state = ST_DISARMED;
     fca:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
     fce:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
		alarmOn = 0;
     fd2:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <alarmOn+0x1>
     fd6:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <alarmOn>
		endSong();
     fda:	0e 94 d3 05 	call	0xba6	; 0xba6 <endSong>
     fde:	08 95       	ret
	}
	else if (k == KP_PPASS) 
     fe0:	03 97       	sbiw	r24, 0x03	; 3
     fe2:	61 f4       	brne	.+24     	; 0xffc <alarming+0x7e>
	{
		state = ST_PANIC;
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <state+0x1>
     fec:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <state>
		alarmOn = 0;
     ff0:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <alarmOn+0x1>
     ff4:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <alarmOn>
		endSong();
     ff8:	0e 94 d3 05 	call	0xba6	; 0xba6 <endSong>
     ffc:	08 95       	ret

00000ffe <admin>:
	}
}

int adminmode = 0;
void admin(void)
{
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	28 97       	sbiw	r28, 0x08	; 8
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
	if (adminmode == 0) // general menu
    1012:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <adminmode>
    1016:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <adminmode+0x1>
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	09 f0       	breq	.+2      	; 0x1020 <admin+0x22>
    101e:	4a c0       	rjmp	.+148    	; 0x10b4 <admin+0xb6>
	{
		if(timermsT(500))
    1020:	64 ef       	ldi	r22, 0xF4	; 244
    1022:	71 e0       	ldi	r23, 0x01	; 1
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
    102c:	89 2b       	or	r24, r25
    102e:	31 f0       	breq	.+12     	; 0x103c <admin+0x3e>
		{
			timerSet();
    1030:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
			PORTLED ^= (1 << LED1);
    1034:	98 b1       	in	r25, 0x08	; 8
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	89 27       	eor	r24, r25
    103a:	88 b9       	out	0x08, r24	; 8
		}
		char k = getKeypress();
    103c:	0e 94 67 02 	call	0x4ce	; 0x4ce <getKeypress>
		if(k == '1') adminmode = 1; // dpass
    1040:	81 33       	cpi	r24, 0x31	; 49
    1042:	39 f4       	brne	.+14     	; 0x1052 <admin+0x54>
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <adminmode+0x1>
    104c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <adminmode>
    1050:	b8 c0       	rjmp	.+368    	; 0x11c2 <admin+0x1c4>
		else if(k == '2') adminmode = 2; // cpass
    1052:	82 33       	cpi	r24, 0x32	; 50
    1054:	39 f4       	brne	.+14     	; 0x1064 <admin+0x66>
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <adminmode+0x1>
    105e:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <adminmode>
    1062:	af c0       	rjmp	.+350    	; 0x11c2 <admin+0x1c4>
		else if(k == '3') adminmode = 3; // ppass
    1064:	83 33       	cpi	r24, 0x33	; 51
    1066:	39 f4       	brne	.+14     	; 0x1076 <admin+0x78>
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <adminmode+0x1>
    1070:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <adminmode>
    1074:	a6 c0       	rjmp	.+332    	; 0x11c2 <admin+0x1c4>
		else if(k == '4') adminmode = 4; // factory reset
    1076:	84 33       	cpi	r24, 0x34	; 52
    1078:	39 f4       	brne	.+14     	; 0x1088 <admin+0x8a>
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <adminmode+0x1>
    1082:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <adminmode>
    1086:	9d c0       	rjmp	.+314    	; 0x11c2 <admin+0x1c4>
		else if(k == '5') playSong(); // easter egg
    1088:	85 33       	cpi	r24, 0x35	; 53
    108a:	19 f4       	brne	.+6      	; 0x1092 <admin+0x94>
    108c:	0e 94 4b 05 	call	0xa96	; 0xa96 <playSong>
    1090:	98 c0       	rjmp	.+304    	; 0x11c2 <admin+0x1c4>
		else if(k == '#')
    1092:	83 32       	cpi	r24, 0x23	; 35
    1094:	09 f0       	breq	.+2      	; 0x1098 <admin+0x9a>
    1096:	95 c0       	rjmp	.+298    	; 0x11c2 <admin+0x1c4>
		{
			adminmode = 0;
    1098:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <adminmode+0x1>
    109c:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <adminmode>
			state = 0;
    10a0:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <state+0x1>
    10a4:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <state>
			PORTC = 0x00;
    10a8:	18 b8       	out	0x08, r1	; 8
			adminWrite();
    10aa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <adminWrite>
			initKeypad();
    10ae:	0e 94 06 02 	call	0x40c	; 0x40c <initKeypad>
    10b2:	87 c0       	rjmp	.+270    	; 0x11c2 <admin+0x1c4>
		}
	}
	else if (adminmode == 1) // dpass edit
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	11 f5       	brne	.+68     	; 0x10fe <admin+0x100>
	{
		PORTLED &= ~(1 << LED1);
    10ba:	40 98       	cbi	0x08, 0	; 8
		if(timermsT(500))
    10bc:	64 ef       	ldi	r22, 0xF4	; 244
    10be:	71 e0       	ldi	r23, 0x01	; 1
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
    10c8:	89 2b       	or	r24, r25
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <admin+0xda>
		{
			timerSet();
    10cc:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
			PORTLED ^= (1 << LED2);
    10d0:	98 b1       	in	r25, 0x08	; 8
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	89 27       	eor	r24, r25
    10d6:	88 b9       	out	0x08, r24	; 8
		}
		int k = runCode();
    10d8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <runCode>
		if (k == 1) // # pressed
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <admin+0xe4>
    10e0:	70 c0       	rjmp	.+224    	; 0x11c2 <admin+0x1c4>
		{
			char c[8];
			int l = getCodeStr(c);
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 06 03 	call	0x60c	; 0x60c <getCodeStr>
			setDPASS(c, l);
    10ea:	bc 01       	movw	r22, r24
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	0e 94 87 01 	call	0x30e	; 0x30e <setDPASS>
			adminmode = 0;
    10f4:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <adminmode+0x1>
    10f8:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <adminmode>
    10fc:	62 c0       	rjmp	.+196    	; 0x11c2 <admin+0x1c4>
		}
	}
	else if (adminmode == 2) // cpass edit
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	11 f5       	brne	.+68     	; 0x1148 <admin+0x14a>
	{
		PORTLED &= ~(1 << LED1);
    1104:	40 98       	cbi	0x08, 0	; 8
		if(timermsT(500))
    1106:	64 ef       	ldi	r22, 0xF4	; 244
    1108:	71 e0       	ldi	r23, 0x01	; 1
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
    1112:	89 2b       	or	r24, r25
    1114:	31 f0       	breq	.+12     	; 0x1122 <admin+0x124>
		{
			timerSet();
    1116:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
			PORTLED ^= (1 << LED3);
    111a:	98 b1       	in	r25, 0x08	; 8
    111c:	84 e0       	ldi	r24, 0x04	; 4
    111e:	89 27       	eor	r24, r25
    1120:	88 b9       	out	0x08, r24	; 8
		}
		int k = runCode();
    1122:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <runCode>
		if (k == 1) // # pressed
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	09 f0       	breq	.+2      	; 0x112c <admin+0x12e>
    112a:	4b c0       	rjmp	.+150    	; 0x11c2 <admin+0x1c4>
		{
			char c[8];
			int l = getCodeStr(c);
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	0e 94 06 03 	call	0x60c	; 0x60c <getCodeStr>
			setCPASS(c, l);
    1134:	bc 01       	movw	r22, r24
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	0e 94 b2 01 	call	0x364	; 0x364 <setCPASS>
			adminmode = 0;
    113e:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <adminmode+0x1>
    1142:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <adminmode>
    1146:	3d c0       	rjmp	.+122    	; 0x11c2 <admin+0x1c4>
		}
	}
	else if (adminmode == 3) // ppass edit
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	09 f5       	brne	.+66     	; 0x1190 <admin+0x192>
	{
		PORTLED &= ~(1 << LED1);
    114e:	40 98       	cbi	0x08, 0	; 8
		if(timermsT(500))
    1150:	64 ef       	ldi	r22, 0xF4	; 244
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
    115c:	89 2b       	or	r24, r25
    115e:	31 f0       	breq	.+12     	; 0x116c <admin+0x16e>
		{
			timerSet();
    1160:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
			PORTLED ^= (1 << LED4);
    1164:	98 b1       	in	r25, 0x08	; 8
    1166:	88 e0       	ldi	r24, 0x08	; 8
    1168:	89 27       	eor	r24, r25
    116a:	88 b9       	out	0x08, r24	; 8
		}
		int k = runCode();
    116c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <runCode>
		if (k == 1) // # pressed
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	39 f5       	brne	.+78     	; 0x11c2 <admin+0x1c4>
		{
			char c[8];
			int l = getCodeStr(c);
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	0e 94 06 03 	call	0x60c	; 0x60c <getCodeStr>
			setPPASS(c, l);
    117c:	bc 01       	movw	r22, r24
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setPPASS>
			adminmode = 0;
    1186:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <adminmode+0x1>
    118a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <adminmode>
    118e:	19 c0       	rjmp	.+50     	; 0x11c2 <admin+0x1c4>
		}
	}
	else if (adminmode == 4) // factory reset
    1190:	04 97       	sbiw	r24, 0x04	; 4
    1192:	b9 f4       	brne	.+46     	; 0x11c2 <admin+0x1c4>
	{
		if(timermsT(500))
    1194:	64 ef       	ldi	r22, 0xF4	; 244
    1196:	71 e0       	ldi	r23, 0x01	; 1
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <timermsT>
    11a0:	89 2b       	or	r24, r25
    11a2:	29 f0       	breq	.+10     	; 0x11ae <admin+0x1b0>
		{
			timerSet();
    11a4:	0e 94 49 09 	call	0x1292	; 0x1292 <timerSet>
			PORTLED ^= 0xFF;
    11a8:	88 b1       	in	r24, 0x08	; 8
    11aa:	80 95       	com	r24
    11ac:	88 b9       	out	0x08, r24	; 8
		}
		char k = getKeypress();
    11ae:	0e 94 67 02 	call	0x4ce	; 0x4ce <getKeypress>
		if (k == '7')
    11b2:	87 33       	cpi	r24, 0x37	; 55
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <admin+0x1c4>
		{
			adminReset();
    11b6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <adminReset>
			adminmode = 0;
    11ba:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <adminmode+0x1>
    11be:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <adminmode>
		}
	}
    11c2:	28 96       	adiw	r28, 0x08	; 8
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <__vector_16>:
}

unsigned long int timesec()
{
	return (count * 1E3);
}
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	af 93       	push	r26
    11e4:	bf 93       	push	r27
    11e6:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <count>
    11ea:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <count+0x1>
    11ee:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <count+0x2>
    11f2:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <count+0x3>
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	a1 1d       	adc	r26, r1
    11fa:	b1 1d       	adc	r27, r1
    11fc:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <count>
    1200:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <count+0x1>
    1204:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <count+0x2>
    1208:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <count+0x3>
    120c:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <tcount>
    1210:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <tcount+0x1>
    1214:	a0 91 03 04 	lds	r26, 0x0403	; 0x800403 <tcount+0x2>
    1218:	b0 91 04 04 	lds	r27, 0x0404	; 0x800404 <tcount+0x3>
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	a1 1d       	adc	r26, r1
    1220:	b1 1d       	adc	r27, r1
    1222:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <tcount>
    1226:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <tcount+0x1>
    122a:	a0 93 03 04 	sts	0x0403, r26	; 0x800403 <tcount+0x2>
    122e:	b0 93 04 04 	sts	0x0404, r27	; 0x800404 <tcount+0x3>
    1232:	80 ef       	ldi	r24, 0xF0	; 240
    1234:	86 bd       	out	0x26, r24	; 38
    1236:	bf 91       	pop	r27
    1238:	af 91       	pop	r26
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <initTimer>:
    1248:	ee e6       	ldi	r30, 0x6E	; 110
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	81 60       	ori	r24, 0x01	; 1
    1250:	80 83       	st	Z, r24
    1252:	80 ef       	ldi	r24, 0xF0	; 240
    1254:	86 bd       	out	0x26, r24	; 38
    1256:	14 bc       	out	0x24, r1	; 36
    1258:	85 e0       	ldi	r24, 0x05	; 5
    125a:	85 bd       	out	0x25, r24	; 37
    125c:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <count>
    1260:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <count+0x1>
    1264:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <count+0x2>
    1268:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <count+0x3>
    126c:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <tcount>
    1270:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <tcount+0x1>
    1274:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <tcount+0x2>
    1278:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <tcount+0x3>
    127c:	78 94       	sei
    127e:	08 95       	ret

00001280 <timems>:
    1280:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <count>
    1284:	70 91 06 04 	lds	r23, 0x0406	; 0x800406 <count+0x1>
    1288:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <count+0x2>
    128c:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <count+0x3>
    1290:	08 95       	ret

00001292 <timerSet>:

void timerSet()
{
	tcount = 0;
    1292:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <tcount>
    1296:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <tcount+0x1>
    129a:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <tcount+0x2>
    129e:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <tcount+0x3>
    12a2:	08 95       	ret

000012a4 <timermsT>:
}

int timermsT(unsigned long int t)
{
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
	return (t < tcount) ? 1 : 0;
    12a8:	00 91 01 04 	lds	r16, 0x0401	; 0x800401 <tcount>
    12ac:	10 91 02 04 	lds	r17, 0x0402	; 0x800402 <tcount+0x1>
    12b0:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <tcount+0x2>
    12b4:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <tcount+0x3>
    12b8:	41 e0       	ldi	r20, 0x01	; 1
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	60 17       	cp	r22, r16
    12be:	71 07       	cpc	r23, r17
    12c0:	82 07       	cpc	r24, r18
    12c2:	93 07       	cpc	r25, r19
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <timermsT+0x26>
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
}
    12ca:	ca 01       	movw	r24, r20
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <timersecT>:

int timersecT(unsigned long int t)
{
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
	t = t * 1E3;
    12da:	0e 94 80 0b 	call	0x1700	; 0x1700 <__floatunsisf>
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a e7       	ldi	r20, 0x7A	; 122
    12e4:	54 e4       	ldi	r21, 0x44	; 68
    12e6:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
	return (t < tcount) ? 1 : 0;
    12ea:	c0 90 01 04 	lds	r12, 0x0401	; 0x800401 <tcount>
    12ee:	d0 90 02 04 	lds	r13, 0x0402	; 0x800402 <tcount+0x1>
    12f2:	e0 90 03 04 	lds	r14, 0x0403	; 0x800403 <tcount+0x2>
    12f6:	f0 90 04 04 	lds	r15, 0x0404	; 0x800404 <tcount+0x3>
    12fa:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixunssfsi>
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	6c 15       	cp	r22, r12
    1304:	7d 05       	cpc	r23, r13
    1306:	8e 05       	cpc	r24, r14
    1308:	9f 05       	cpc	r25, r15
    130a:	10 f0       	brcs	.+4      	; 0x1310 <timersecT+0x3e>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
}
    1310:	c9 01       	movw	r24, r18
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	08 95       	ret

0000131c <delayms>:

void delayms(int t)
{
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
	sei();
}

unsigned long int timems()
{
	return count;
    1320:	00 91 05 04 	lds	r16, 0x0405	; 0x800405 <count>
    1324:	10 91 06 04 	lds	r17, 0x0406	; 0x800406 <count+0x1>
    1328:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <count+0x2>
    132c:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <count+0x3>
}

void delayms(int t)
{
	unsigned long int initT = timems();
	while((timems() - initT) < t);
    1330:	09 2e       	mov	r0, r25
    1332:	00 0c       	add	r0, r0
    1334:	aa 0b       	sbc	r26, r26
    1336:	bb 0b       	sbc	r27, r27
	sei();
}

unsigned long int timems()
{
	return count;
    1338:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <count>
    133c:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <count+0x1>
    1340:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <count+0x2>
    1344:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <count+0x3>
}

void delayms(int t)
{
	unsigned long int initT = timems();
	while((timems() - initT) < t);
    1348:	40 1b       	sub	r20, r16
    134a:	51 0b       	sbc	r21, r17
    134c:	62 0b       	sbc	r22, r18
    134e:	73 0b       	sbc	r23, r19
    1350:	48 17       	cp	r20, r24
    1352:	59 07       	cpc	r21, r25
    1354:	6a 07       	cpc	r22, r26
    1356:	7b 07       	cpc	r23, r27
    1358:	78 f3       	brcs	.-34     	; 0x1338 <delayms+0x1c>
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
    1360:	e0 ec       	ldi	r30, 0xC0	; 192
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	90 81       	ld	r25, Z
    1366:	95 ff       	sbrs	r25, 5
    1368:	fd cf       	rjmp	.-6      	; 0x1364 <uart_putchar+0x4>
	UDR0 = c;
    136a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	08 95       	ret

00001374 <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
    1374:	e0 ec       	ldi	r30, 0xC0	; 192
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 23       	and	r24, r24
    137c:	ec f7       	brge	.-6      	; 0x1378 <uart_getchar+0x4>
	return UDR0;
    137e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	08 95       	ret

00001386 <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1386:	88 e1       	ldi	r24, 0x18	; 24
    1388:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
    138c:	87 e6       	ldi	r24, 0x67	; 103
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    1394:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	stdout = &mystdout;
    1398:	e4 e1       	ldi	r30, 0x14	; 20
    139a:	f4 e0       	ldi	r31, 0x04	; 4
    139c:	81 ed       	ldi	r24, 0xD1	; 209
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	93 83       	std	Z+3, r25	; 0x03
    13a2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
    13a4:	83 ec       	ldi	r24, 0xC3	; 195
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    13ac:	08 95       	ret

000013ae <__vector_13>:

/***************************************************************************************
When the echo length is longer than the counter duration, we use an additional byte to
indicate how many times we reach the maximum value.
***************************************************************************************/
ISR (TIMER1_OVF_vect) {	// For long ECHO's
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
	if(ECHOHighPipe >= 2) {
    13d0:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <ECHOHighPipe>
    13d4:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <ECHOHighPipe+0x1>
    13d8:	02 97       	sbiw	r24, 0x02	; 2
    13da:	30 f0       	brcs	.+12     	; 0x13e8 <__vector_13+0x3a>
		TIMSK1 = 0;	// No further interrupts.
    13dc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCCR1B = 0; // Stop Clock
    13e0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		MIP = 0;	// End Measurement
    13e4:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <MIP>
	}
	
	printf("ovf\n");
    13e8:	85 e8       	ldi	r24, 0x85	; 133
    13ea:	93 e0       	ldi	r25, 0x03	; 3
    13ec:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
	ECHOHighPipe++;	// Add 1 to High byte.
    13f0:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <ECHOHighPipe>
    13f4:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <ECHOHighPipe+0x1>
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <ECHOHighPipe+0x1>
    13fe:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <ECHOHighPipe>
}
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <__vector_10>:

/***************************************************************************************
Interrupt service routine called when the input capture pin state is changed
***************************************************************************************/
ISR (TIMER1_CAPT_vect) {	// Start and Stop ECHO measurement;
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
	printf("Echo meas\n");
    1446:	89 e8       	ldi	r24, 0x89	; 137
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <puts>
	if((TCCR1B & (1 << ICES1)) != 0) { // a rising edge has been detected
    144e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1452:	86 ff       	sbrs	r24, 6
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <__vector_10+0x44>
		TCCR1B |= (1<<CS11);	// Start counting with ck/8;
    1456:	e1 e8       	ldi	r30, 0x81	; 129
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	82 60       	ori	r24, 0x02	; 2
    145e:	80 83       	st	Z, r24
		TCCR1B &= ~(1 << ICES1);  // Configure Negative Edge Capture for end of echo pulse.
    1460:	80 81       	ld	r24, Z
    1462:	8f 7b       	andi	r24, 0xBF	; 191
    1464:	80 83       	st	Z, r24
    1466:	15 c0       	rjmp	.+42     	; 0x1492 <__vector_10+0x6e>
	}
	
	else {						// a falling edge has been detected
		ECHOLow = TCNT1;
    1468:	e4 e8       	ldi	r30, 0x84	; 132
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <ECHOLow+0x1>
    1474:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <ECHOLow>
		ECHOHigh = ECHOHighPipe;
    1478:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <ECHOHighPipe>
    147c:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <ECHOHighPipe+0x1>
    1480:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <ECHOHigh+0x1>
    1484:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <ECHOHigh>
		TIMSK1 = (1 << OCIE1B);	// Enables the Compare B interrupt for POST Trigger Delay: Approx 10mS
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
    148e:	11 82       	std	Z+1, r1	; 0x01
    1490:	10 82       	st	Z, r1
	}
}
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <__vector_12>:
/***************************************************************************************
Interrupt service routine called when the counter 1 has reached the compare value
***************************************************************************************/

ISR (TIMER1_COMPB_vect)
{
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
	MIP = 0;
    14be:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <MIP>
}
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__subsf3>:
    14cc:	50 58       	subi	r21, 0x80	; 128

000014ce <__addsf3>:
    14ce:	bb 27       	eor	r27, r27
    14d0:	aa 27       	eor	r26, r26
    14d2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__addsf3x>
    14d6:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>
    14da:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscA>
    14de:	38 f0       	brcs	.+14     	; 0x14ee <__addsf3+0x20>
    14e0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_pscB>
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <__addsf3+0x20>
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__addsf3+0x28>
    14e8:	9f 3f       	cpi	r25, 0xFF	; 255
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <__addsf3+0x24>
    14ec:	26 f4       	brtc	.+8      	; 0x14f6 <__addsf3+0x28>
    14ee:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>
    14f2:	0e f4       	brtc	.+2      	; 0x14f6 <__addsf3+0x28>
    14f4:	e0 95       	com	r30
    14f6:	e7 fb       	bst	r30, 7
    14f8:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>

000014fc <__addsf3x>:
    14fc:	e9 2f       	mov	r30, r25
    14fe:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_split3>
    1502:	58 f3       	brcs	.-42     	; 0x14da <__addsf3+0xc>
    1504:	ba 17       	cp	r27, r26
    1506:	62 07       	cpc	r22, r18
    1508:	73 07       	cpc	r23, r19
    150a:	84 07       	cpc	r24, r20
    150c:	95 07       	cpc	r25, r21
    150e:	20 f0       	brcs	.+8      	; 0x1518 <__addsf3x+0x1c>
    1510:	79 f4       	brne	.+30     	; 0x1530 <__addsf3x+0x34>
    1512:	a6 f5       	brtc	.+104    	; 0x157c <__addsf3x+0x80>
    1514:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_zero>
    1518:	0e f4       	brtc	.+2      	; 0x151c <__addsf3x+0x20>
    151a:	e0 95       	com	r30
    151c:	0b 2e       	mov	r0, r27
    151e:	ba 2f       	mov	r27, r26
    1520:	a0 2d       	mov	r26, r0
    1522:	0b 01       	movw	r0, r22
    1524:	b9 01       	movw	r22, r18
    1526:	90 01       	movw	r18, r0
    1528:	0c 01       	movw	r0, r24
    152a:	ca 01       	movw	r24, r20
    152c:	a0 01       	movw	r20, r0
    152e:	11 24       	eor	r1, r1
    1530:	ff 27       	eor	r31, r31
    1532:	59 1b       	sub	r21, r25
    1534:	99 f0       	breq	.+38     	; 0x155c <__addsf3x+0x60>
    1536:	59 3f       	cpi	r21, 0xF9	; 249
    1538:	50 f4       	brcc	.+20     	; 0x154e <__addsf3x+0x52>
    153a:	50 3e       	cpi	r21, 0xE0	; 224
    153c:	68 f1       	brcs	.+90     	; 0x1598 <__addsf3x+0x9c>
    153e:	1a 16       	cp	r1, r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	a2 2f       	mov	r26, r18
    1544:	23 2f       	mov	r18, r19
    1546:	34 2f       	mov	r19, r20
    1548:	44 27       	eor	r20, r20
    154a:	58 5f       	subi	r21, 0xF8	; 248
    154c:	f3 cf       	rjmp	.-26     	; 0x1534 <__addsf3x+0x38>
    154e:	46 95       	lsr	r20
    1550:	37 95       	ror	r19
    1552:	27 95       	ror	r18
    1554:	a7 95       	ror	r26
    1556:	f0 40       	sbci	r31, 0x00	; 0
    1558:	53 95       	inc	r21
    155a:	c9 f7       	brne	.-14     	; 0x154e <__addsf3x+0x52>
    155c:	7e f4       	brtc	.+30     	; 0x157c <__addsf3x+0x80>
    155e:	1f 16       	cp	r1, r31
    1560:	ba 0b       	sbc	r27, r26
    1562:	62 0b       	sbc	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	ba f0       	brmi	.+46     	; 0x1598 <__addsf3x+0x9c>
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	a1 f0       	breq	.+40     	; 0x1596 <__addsf3x+0x9a>
    156e:	ff 0f       	add	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	c2 f7       	brpl	.-16     	; 0x156a <__addsf3x+0x6e>
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <__addsf3x+0x9c>
    157c:	ba 0f       	add	r27, r26
    157e:	62 1f       	adc	r22, r18
    1580:	73 1f       	adc	r23, r19
    1582:	84 1f       	adc	r24, r20
    1584:	48 f4       	brcc	.+18     	; 0x1598 <__addsf3x+0x9c>
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f7 95       	ror	r31
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	08 f0       	brcs	.+2      	; 0x1596 <__addsf3x+0x9a>
    1594:	b0 cf       	rjmp	.-160    	; 0x14f6 <__addsf3+0x28>
    1596:	93 95       	inc	r25
    1598:	88 0f       	add	r24, r24
    159a:	08 f0       	brcs	.+2      	; 0x159e <__addsf3x+0xa2>
    159c:	99 27       	eor	r25, r25
    159e:	ee 0f       	add	r30, r30
    15a0:	97 95       	ror	r25
    15a2:	87 95       	ror	r24
    15a4:	08 95       	ret

000015a6 <__cmpsf2>:
    15a6:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_cmp>
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <__cmpsf2+0x8>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	08 95       	ret

000015b0 <__divsf3>:
    15b0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__divsf3x>
    15b4:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>
    15b8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_pscB>
    15bc:	58 f0       	brcs	.+22     	; 0x15d4 <__divsf3+0x24>
    15be:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscA>
    15c2:	40 f0       	brcs	.+16     	; 0x15d4 <__divsf3+0x24>
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <__divsf3+0x20>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	29 f0       	breq	.+10     	; 0x15d4 <__divsf3+0x24>
    15ca:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    15ce:	51 11       	cpse	r21, r1
    15d0:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    15d4:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>

000015d8 <__divsf3x>:
    15d8:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_split3>
    15dc:	68 f3       	brcs	.-38     	; 0x15b8 <__divsf3+0x8>

000015de <__divsf3_pse>:
    15de:	99 23       	and	r25, r25
    15e0:	b1 f3       	breq	.-20     	; 0x15ce <__divsf3+0x1e>
    15e2:	55 23       	and	r21, r21
    15e4:	91 f3       	breq	.-28     	; 0x15ca <__divsf3+0x1a>
    15e6:	95 1b       	sub	r25, r21
    15e8:	55 0b       	sbc	r21, r21
    15ea:	bb 27       	eor	r27, r27
    15ec:	aa 27       	eor	r26, r26
    15ee:	62 17       	cp	r22, r18
    15f0:	73 07       	cpc	r23, r19
    15f2:	84 07       	cpc	r24, r20
    15f4:	38 f0       	brcs	.+14     	; 0x1604 <__divsf3_pse+0x26>
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	44 1f       	adc	r20, r20
    1600:	aa 1f       	adc	r26, r26
    1602:	a9 f3       	breq	.-22     	; 0x15ee <__divsf3_pse+0x10>
    1604:	35 d0       	rcall	.+106    	; 0x1670 <__divsf3_pse+0x92>
    1606:	0e 2e       	mov	r0, r30
    1608:	3a f0       	brmi	.+14     	; 0x1618 <__divsf3_pse+0x3a>
    160a:	e0 e8       	ldi	r30, 0x80	; 128
    160c:	32 d0       	rcall	.+100    	; 0x1672 <__divsf3_pse+0x94>
    160e:	91 50       	subi	r25, 0x01	; 1
    1610:	50 40       	sbci	r21, 0x00	; 0
    1612:	e6 95       	lsr	r30
    1614:	00 1c       	adc	r0, r0
    1616:	ca f7       	brpl	.-14     	; 0x160a <__divsf3_pse+0x2c>
    1618:	2b d0       	rcall	.+86     	; 0x1670 <__divsf3_pse+0x92>
    161a:	fe 2f       	mov	r31, r30
    161c:	29 d0       	rcall	.+82     	; 0x1670 <__divsf3_pse+0x92>
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	bb 1f       	adc	r27, r27
    1626:	26 17       	cp	r18, r22
    1628:	37 07       	cpc	r19, r23
    162a:	48 07       	cpc	r20, r24
    162c:	ab 07       	cpc	r26, r27
    162e:	b0 e8       	ldi	r27, 0x80	; 128
    1630:	09 f0       	breq	.+2      	; 0x1634 <__divsf3_pse+0x56>
    1632:	bb 0b       	sbc	r27, r27
    1634:	80 2d       	mov	r24, r0
    1636:	bf 01       	movw	r22, r30
    1638:	ff 27       	eor	r31, r31
    163a:	93 58       	subi	r25, 0x83	; 131
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	3a f0       	brmi	.+14     	; 0x164e <__divsf3_pse+0x70>
    1640:	9e 3f       	cpi	r25, 0xFE	; 254
    1642:	51 05       	cpc	r21, r1
    1644:	78 f0       	brcs	.+30     	; 0x1664 <__divsf3_pse+0x86>
    1646:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    164a:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    164e:	5f 3f       	cpi	r21, 0xFF	; 255
    1650:	e4 f3       	brlt	.-8      	; 0x164a <__divsf3_pse+0x6c>
    1652:	98 3e       	cpi	r25, 0xE8	; 232
    1654:	d4 f3       	brlt	.-12     	; 0x164a <__divsf3_pse+0x6c>
    1656:	86 95       	lsr	r24
    1658:	77 95       	ror	r23
    165a:	67 95       	ror	r22
    165c:	b7 95       	ror	r27
    165e:	f7 95       	ror	r31
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	c9 f7       	brne	.-14     	; 0x1656 <__divsf3_pse+0x78>
    1664:	88 0f       	add	r24, r24
    1666:	91 1d       	adc	r25, r1
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret
    1670:	e1 e0       	ldi	r30, 0x01	; 1
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	88 1f       	adc	r24, r24
    1678:	bb 1f       	adc	r27, r27
    167a:	62 17       	cp	r22, r18
    167c:	73 07       	cpc	r23, r19
    167e:	84 07       	cpc	r24, r20
    1680:	ba 07       	cpc	r27, r26
    1682:	20 f0       	brcs	.+8      	; 0x168c <__divsf3_pse+0xae>
    1684:	62 1b       	sub	r22, r18
    1686:	73 0b       	sbc	r23, r19
    1688:	84 0b       	sbc	r24, r20
    168a:	ba 0b       	sbc	r27, r26
    168c:	ee 1f       	adc	r30, r30
    168e:	88 f7       	brcc	.-30     	; 0x1672 <__divsf3_pse+0x94>
    1690:	e0 95       	com	r30
    1692:	08 95       	ret

00001694 <__fixsfsi>:
    1694:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixunssfsi>
    1698:	68 94       	set
    169a:	b1 11       	cpse	r27, r1
    169c:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    16a0:	08 95       	ret

000016a2 <__fixunssfsi>:
    16a2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_splitA>
    16a6:	88 f0       	brcs	.+34     	; 0x16ca <__fixunssfsi+0x28>
    16a8:	9f 57       	subi	r25, 0x7F	; 127
    16aa:	98 f0       	brcs	.+38     	; 0x16d2 <__fixunssfsi+0x30>
    16ac:	b9 2f       	mov	r27, r25
    16ae:	99 27       	eor	r25, r25
    16b0:	b7 51       	subi	r27, 0x17	; 23
    16b2:	b0 f0       	brcs	.+44     	; 0x16e0 <__fixunssfsi+0x3e>
    16b4:	e1 f0       	breq	.+56     	; 0x16ee <__fixunssfsi+0x4c>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	1a f0       	brmi	.+6      	; 0x16c6 <__fixunssfsi+0x24>
    16c0:	ba 95       	dec	r27
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <__fixunssfsi+0x14>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <__fixunssfsi+0x4c>
    16c6:	b1 30       	cpi	r27, 0x01	; 1
    16c8:	91 f0       	breq	.+36     	; 0x16ee <__fixunssfsi+0x4c>
    16ca:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fp_zero>
    16ce:	b1 e0       	ldi	r27, 0x01	; 1
    16d0:	08 95       	ret
    16d2:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_zero>
    16d6:	67 2f       	mov	r22, r23
    16d8:	78 2f       	mov	r23, r24
    16da:	88 27       	eor	r24, r24
    16dc:	b8 5f       	subi	r27, 0xF8	; 248
    16de:	39 f0       	breq	.+14     	; 0x16ee <__fixunssfsi+0x4c>
    16e0:	b9 3f       	cpi	r27, 0xF9	; 249
    16e2:	cc f3       	brlt	.-14     	; 0x16d6 <__fixunssfsi+0x34>
    16e4:	86 95       	lsr	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b3 95       	inc	r27
    16ec:	d9 f7       	brne	.-10     	; 0x16e4 <__fixunssfsi+0x42>
    16ee:	3e f4       	brtc	.+14     	; 0x16fe <__fixunssfsi+0x5c>
    16f0:	90 95       	com	r25
    16f2:	80 95       	com	r24
    16f4:	70 95       	com	r23
    16f6:	61 95       	neg	r22
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__floatunsisf>:
    1700:	e8 94       	clt
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <__floatsisf+0x12>

00001704 <__floatsisf>:
    1704:	97 fb       	bst	r25, 7
    1706:	3e f4       	brtc	.+14     	; 0x1716 <__floatsisf+0x12>
    1708:	90 95       	com	r25
    170a:	80 95       	com	r24
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	99 23       	and	r25, r25
    1718:	a9 f0       	breq	.+42     	; 0x1744 <__floatsisf+0x40>
    171a:	f9 2f       	mov	r31, r25
    171c:	96 e9       	ldi	r25, 0x96	; 150
    171e:	bb 27       	eor	r27, r27
    1720:	93 95       	inc	r25
    1722:	f6 95       	lsr	r31
    1724:	87 95       	ror	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b7 95       	ror	r27
    172c:	f1 11       	cpse	r31, r1
    172e:	f8 cf       	rjmp	.-16     	; 0x1720 <__floatsisf+0x1c>
    1730:	fa f4       	brpl	.+62     	; 0x1770 <__floatsisf+0x6c>
    1732:	bb 0f       	add	r27, r27
    1734:	11 f4       	brne	.+4      	; 0x173a <__floatsisf+0x36>
    1736:	60 ff       	sbrs	r22, 0
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <__floatsisf+0x6c>
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	8f 4f       	sbci	r24, 0xFF	; 255
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	16 c0       	rjmp	.+44     	; 0x1770 <__floatsisf+0x6c>
    1744:	88 23       	and	r24, r24
    1746:	11 f0       	breq	.+4      	; 0x174c <__floatsisf+0x48>
    1748:	96 e9       	ldi	r25, 0x96	; 150
    174a:	11 c0       	rjmp	.+34     	; 0x176e <__floatsisf+0x6a>
    174c:	77 23       	and	r23, r23
    174e:	21 f0       	breq	.+8      	; 0x1758 <__floatsisf+0x54>
    1750:	9e e8       	ldi	r25, 0x8E	; 142
    1752:	87 2f       	mov	r24, r23
    1754:	76 2f       	mov	r23, r22
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <__floatsisf+0x5e>
    1758:	66 23       	and	r22, r22
    175a:	71 f0       	breq	.+28     	; 0x1778 <__floatsisf+0x74>
    175c:	96 e8       	ldi	r25, 0x86	; 134
    175e:	86 2f       	mov	r24, r22
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	2a f0       	brmi	.+10     	; 0x1770 <__floatsisf+0x6c>
    1766:	9a 95       	dec	r25
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	da f7       	brpl	.-10     	; 0x1766 <__floatsisf+0x62>
    1770:	88 0f       	add	r24, r24
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	97 f9       	bld	r25, 7
    1778:	08 95       	ret

0000177a <__fp_cmp>:
    177a:	99 0f       	add	r25, r25
    177c:	00 08       	sbc	r0, r0
    177e:	55 0f       	add	r21, r21
    1780:	aa 0b       	sbc	r26, r26
    1782:	e0 e8       	ldi	r30, 0x80	; 128
    1784:	fe ef       	ldi	r31, 0xFE	; 254
    1786:	16 16       	cp	r1, r22
    1788:	17 06       	cpc	r1, r23
    178a:	e8 07       	cpc	r30, r24
    178c:	f9 07       	cpc	r31, r25
    178e:	c0 f0       	brcs	.+48     	; 0x17c0 <__fp_cmp+0x46>
    1790:	12 16       	cp	r1, r18
    1792:	13 06       	cpc	r1, r19
    1794:	e4 07       	cpc	r30, r20
    1796:	f5 07       	cpc	r31, r21
    1798:	98 f0       	brcs	.+38     	; 0x17c0 <__fp_cmp+0x46>
    179a:	62 1b       	sub	r22, r18
    179c:	73 0b       	sbc	r23, r19
    179e:	84 0b       	sbc	r24, r20
    17a0:	95 0b       	sbc	r25, r21
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <__fp_cmp+0x38>
    17a4:	0a 26       	eor	r0, r26
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <__fp_cmp+0x46>
    17a8:	23 2b       	or	r18, r19
    17aa:	24 2b       	or	r18, r20
    17ac:	25 2b       	or	r18, r21
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <__fp_cmp+0x3e>
    17b0:	08 95       	ret
    17b2:	0a 26       	eor	r0, r26
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <__fp_cmp+0x3e>
    17b6:	a1 40       	sbci	r26, 0x01	; 1
    17b8:	a6 95       	lsr	r26
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	81 1d       	adc	r24, r1
    17be:	81 1d       	adc	r24, r1
    17c0:	08 95       	ret

000017c2 <__fp_inf>:
    17c2:	97 f9       	bld	r25, 7
    17c4:	9f 67       	ori	r25, 0x7F	; 127
    17c6:	80 e8       	ldi	r24, 0x80	; 128
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	08 95       	ret

000017ce <__fp_nan>:
    17ce:	9f ef       	ldi	r25, 0xFF	; 255
    17d0:	80 ec       	ldi	r24, 0xC0	; 192
    17d2:	08 95       	ret

000017d4 <__fp_pscA>:
    17d4:	00 24       	eor	r0, r0
    17d6:	0a 94       	dec	r0
    17d8:	16 16       	cp	r1, r22
    17da:	17 06       	cpc	r1, r23
    17dc:	18 06       	cpc	r1, r24
    17de:	09 06       	cpc	r0, r25
    17e0:	08 95       	ret

000017e2 <__fp_pscB>:
    17e2:	00 24       	eor	r0, r0
    17e4:	0a 94       	dec	r0
    17e6:	12 16       	cp	r1, r18
    17e8:	13 06       	cpc	r1, r19
    17ea:	14 06       	cpc	r1, r20
    17ec:	05 06       	cpc	r0, r21
    17ee:	08 95       	ret

000017f0 <__fp_round>:
    17f0:	09 2e       	mov	r0, r25
    17f2:	03 94       	inc	r0
    17f4:	00 0c       	add	r0, r0
    17f6:	11 f4       	brne	.+4      	; 0x17fc <__fp_round+0xc>
    17f8:	88 23       	and	r24, r24
    17fa:	52 f0       	brmi	.+20     	; 0x1810 <__fp_round+0x20>
    17fc:	bb 0f       	add	r27, r27
    17fe:	40 f4       	brcc	.+16     	; 0x1810 <__fp_round+0x20>
    1800:	bf 2b       	or	r27, r31
    1802:	11 f4       	brne	.+4      	; 0x1808 <__fp_round+0x18>
    1804:	60 ff       	sbrs	r22, 0
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <__fp_round+0x20>
    1808:	6f 5f       	subi	r22, 0xFF	; 255
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <__fp_split3>:
    1812:	57 fd       	sbrc	r21, 7
    1814:	90 58       	subi	r25, 0x80	; 128
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	59 f0       	breq	.+22     	; 0x1832 <__fp_splitA+0x10>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	71 f0       	breq	.+28     	; 0x183c <__fp_splitA+0x1a>
    1820:	47 95       	ror	r20

00001822 <__fp_splitA>:
    1822:	88 0f       	add	r24, r24
    1824:	97 fb       	bst	r25, 7
    1826:	99 1f       	adc	r25, r25
    1828:	61 f0       	breq	.+24     	; 0x1842 <__fp_splitA+0x20>
    182a:	9f 3f       	cpi	r25, 0xFF	; 255
    182c:	79 f0       	breq	.+30     	; 0x184c <__fp_splitA+0x2a>
    182e:	87 95       	ror	r24
    1830:	08 95       	ret
    1832:	12 16       	cp	r1, r18
    1834:	13 06       	cpc	r1, r19
    1836:	14 06       	cpc	r1, r20
    1838:	55 1f       	adc	r21, r21
    183a:	f2 cf       	rjmp	.-28     	; 0x1820 <__fp_split3+0xe>
    183c:	46 95       	lsr	r20
    183e:	f1 df       	rcall	.-30     	; 0x1822 <__fp_splitA>
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <__fp_splitA+0x30>
    1842:	16 16       	cp	r1, r22
    1844:	17 06       	cpc	r1, r23
    1846:	18 06       	cpc	r1, r24
    1848:	99 1f       	adc	r25, r25
    184a:	f1 cf       	rjmp	.-30     	; 0x182e <__fp_splitA+0xc>
    184c:	86 95       	lsr	r24
    184e:	71 05       	cpc	r23, r1
    1850:	61 05       	cpc	r22, r1
    1852:	08 94       	sec
    1854:	08 95       	ret

00001856 <__fp_zero>:
    1856:	e8 94       	clt

00001858 <__fp_szero>:
    1858:	bb 27       	eor	r27, r27
    185a:	66 27       	eor	r22, r22
    185c:	77 27       	eor	r23, r23
    185e:	cb 01       	movw	r24, r22
    1860:	97 f9       	bld	r25, 7
    1862:	08 95       	ret

00001864 <__gesf2>:
    1864:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_cmp>
    1868:	08 f4       	brcc	.+2      	; 0x186c <__gesf2+0x8>
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	08 95       	ret

0000186e <__mulsf3>:
    186e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3x>
    1872:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>
    1876:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscA>
    187a:	38 f0       	brcs	.+14     	; 0x188a <__mulsf3+0x1c>
    187c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_pscB>
    1880:	20 f0       	brcs	.+8      	; 0x188a <__mulsf3+0x1c>
    1882:	95 23       	and	r25, r21
    1884:	11 f0       	breq	.+4      	; 0x188a <__mulsf3+0x1c>
    1886:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    188a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>
    188e:	11 24       	eor	r1, r1
    1890:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>

00001894 <__mulsf3x>:
    1894:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_split3>
    1898:	70 f3       	brcs	.-36     	; 0x1876 <__mulsf3+0x8>

0000189a <__mulsf3_pse>:
    189a:	95 9f       	mul	r25, r21
    189c:	c1 f3       	breq	.-16     	; 0x188e <__mulsf3+0x20>
    189e:	95 0f       	add	r25, r21
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	55 1f       	adc	r21, r21
    18a4:	62 9f       	mul	r22, r18
    18a6:	f0 01       	movw	r30, r0
    18a8:	72 9f       	mul	r23, r18
    18aa:	bb 27       	eor	r27, r27
    18ac:	f0 0d       	add	r31, r0
    18ae:	b1 1d       	adc	r27, r1
    18b0:	63 9f       	mul	r22, r19
    18b2:	aa 27       	eor	r26, r26
    18b4:	f0 0d       	add	r31, r0
    18b6:	b1 1d       	adc	r27, r1
    18b8:	aa 1f       	adc	r26, r26
    18ba:	64 9f       	mul	r22, r20
    18bc:	66 27       	eor	r22, r22
    18be:	b0 0d       	add	r27, r0
    18c0:	a1 1d       	adc	r26, r1
    18c2:	66 1f       	adc	r22, r22
    18c4:	82 9f       	mul	r24, r18
    18c6:	22 27       	eor	r18, r18
    18c8:	b0 0d       	add	r27, r0
    18ca:	a1 1d       	adc	r26, r1
    18cc:	62 1f       	adc	r22, r18
    18ce:	73 9f       	mul	r23, r19
    18d0:	b0 0d       	add	r27, r0
    18d2:	a1 1d       	adc	r26, r1
    18d4:	62 1f       	adc	r22, r18
    18d6:	83 9f       	mul	r24, r19
    18d8:	a0 0d       	add	r26, r0
    18da:	61 1d       	adc	r22, r1
    18dc:	22 1f       	adc	r18, r18
    18de:	74 9f       	mul	r23, r20
    18e0:	33 27       	eor	r19, r19
    18e2:	a0 0d       	add	r26, r0
    18e4:	61 1d       	adc	r22, r1
    18e6:	23 1f       	adc	r18, r19
    18e8:	84 9f       	mul	r24, r20
    18ea:	60 0d       	add	r22, r0
    18ec:	21 1d       	adc	r18, r1
    18ee:	82 2f       	mov	r24, r18
    18f0:	76 2f       	mov	r23, r22
    18f2:	6a 2f       	mov	r22, r26
    18f4:	11 24       	eor	r1, r1
    18f6:	9f 57       	subi	r25, 0x7F	; 127
    18f8:	50 40       	sbci	r21, 0x00	; 0
    18fa:	9a f0       	brmi	.+38     	; 0x1922 <__mulsf3_pse+0x88>
    18fc:	f1 f0       	breq	.+60     	; 0x193a <__mulsf3_pse+0xa0>
    18fe:	88 23       	and	r24, r24
    1900:	4a f0       	brmi	.+18     	; 0x1914 <__mulsf3_pse+0x7a>
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	bb 1f       	adc	r27, r27
    1908:	66 1f       	adc	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	91 50       	subi	r25, 0x01	; 1
    1910:	50 40       	sbci	r21, 0x00	; 0
    1912:	a9 f7       	brne	.-22     	; 0x18fe <__mulsf3_pse+0x64>
    1914:	9e 3f       	cpi	r25, 0xFE	; 254
    1916:	51 05       	cpc	r21, r1
    1918:	80 f0       	brcs	.+32     	; 0x193a <__mulsf3_pse+0xa0>
    191a:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    191e:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    1922:	5f 3f       	cpi	r21, 0xFF	; 255
    1924:	e4 f3       	brlt	.-8      	; 0x191e <__mulsf3_pse+0x84>
    1926:	98 3e       	cpi	r25, 0xE8	; 232
    1928:	d4 f3       	brlt	.-12     	; 0x191e <__mulsf3_pse+0x84>
    192a:	86 95       	lsr	r24
    192c:	77 95       	ror	r23
    192e:	67 95       	ror	r22
    1930:	b7 95       	ror	r27
    1932:	f7 95       	ror	r31
    1934:	e7 95       	ror	r30
    1936:	9f 5f       	subi	r25, 0xFF	; 255
    1938:	c1 f7       	brne	.-16     	; 0x192a <__mulsf3_pse+0x90>
    193a:	fe 2b       	or	r31, r30
    193c:	88 0f       	add	r24, r24
    193e:	91 1d       	adc	r25, r1
    1940:	96 95       	lsr	r25
    1942:	87 95       	ror	r24
    1944:	97 f9       	bld	r25, 7
    1946:	08 95       	ret

00001948 <pow>:
    1948:	fa 01       	movw	r30, r20
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	30 96       	adiw	r30, 0x00	; 0
    1950:	21 05       	cpc	r18, r1
    1952:	31 05       	cpc	r19, r1
    1954:	a1 f1       	breq	.+104    	; 0x19be <pow+0x76>
    1956:	61 15       	cp	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	61 f4       	brne	.+24     	; 0x1974 <pow+0x2c>
    195c:	80 38       	cpi	r24, 0x80	; 128
    195e:	bf e3       	ldi	r27, 0x3F	; 63
    1960:	9b 07       	cpc	r25, r27
    1962:	49 f1       	breq	.+82     	; 0x19b6 <pow+0x6e>
    1964:	68 94       	set
    1966:	90 38       	cpi	r25, 0x80	; 128
    1968:	81 05       	cpc	r24, r1
    196a:	61 f0       	breq	.+24     	; 0x1984 <pow+0x3c>
    196c:	80 38       	cpi	r24, 0x80	; 128
    196e:	bf ef       	ldi	r27, 0xFF	; 255
    1970:	9b 07       	cpc	r25, r27
    1972:	41 f0       	breq	.+16     	; 0x1984 <pow+0x3c>
    1974:	99 23       	and	r25, r25
    1976:	4a f5       	brpl	.+82     	; 0x19ca <pow+0x82>
    1978:	ff 3f       	cpi	r31, 0xFF	; 255
    197a:	e1 05       	cpc	r30, r1
    197c:	31 05       	cpc	r19, r1
    197e:	21 05       	cpc	r18, r1
    1980:	19 f1       	breq	.+70     	; 0x19c8 <pow+0x80>
    1982:	e8 94       	clt
    1984:	08 94       	sec
    1986:	e7 95       	ror	r30
    1988:	d9 01       	movw	r26, r18
    198a:	aa 23       	and	r26, r26
    198c:	29 f4       	brne	.+10     	; 0x1998 <pow+0x50>
    198e:	ab 2f       	mov	r26, r27
    1990:	be 2f       	mov	r27, r30
    1992:	f8 5f       	subi	r31, 0xF8	; 248
    1994:	d0 f3       	brcs	.-12     	; 0x198a <pow+0x42>
    1996:	10 c0       	rjmp	.+32     	; 0x19b8 <pow+0x70>
    1998:	ff 5f       	subi	r31, 0xFF	; 255
    199a:	70 f4       	brcc	.+28     	; 0x19b8 <pow+0x70>
    199c:	a6 95       	lsr	r26
    199e:	e0 f7       	brcc	.-8      	; 0x1998 <pow+0x50>
    19a0:	f7 39       	cpi	r31, 0x97	; 151
    19a2:	50 f0       	brcs	.+20     	; 0x19b8 <pow+0x70>
    19a4:	19 f0       	breq	.+6      	; 0x19ac <pow+0x64>
    19a6:	ff 3a       	cpi	r31, 0xAF	; 175
    19a8:	38 f4       	brcc	.+14     	; 0x19b8 <pow+0x70>
    19aa:	9f 77       	andi	r25, 0x7F	; 127
    19ac:	9f 93       	push	r25
    19ae:	0d d0       	rcall	.+26     	; 0x19ca <pow+0x82>
    19b0:	0f 90       	pop	r0
    19b2:	07 fc       	sbrc	r0, 7
    19b4:	90 58       	subi	r25, 0x80	; 128
    19b6:	08 95       	ret
    19b8:	46 f0       	brts	.+16     	; 0x19ca <pow+0x82>
    19ba:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	80 e8       	ldi	r24, 0x80	; 128
    19c4:	9f e3       	ldi	r25, 0x3F	; 63
    19c6:	08 95       	ret
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	9f 77       	andi	r25, 0x7F	; 127
    19cc:	5f 93       	push	r21
    19ce:	4f 93       	push	r20
    19d0:	3f 93       	push	r19
    19d2:	2f 93       	push	r18
    19d4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <log>
    19d8:	2f 91       	pop	r18
    19da:	3f 91       	pop	r19
    19dc:	4f 91       	pop	r20
    19de:	5f 91       	pop	r21
    19e0:	0e 94 37 0c 	call	0x186e	; 0x186e <__mulsf3>
    19e4:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <exp>
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <pow+0xac>
    19ea:	16 f0       	brts	.+4      	; 0x19f0 <pow+0xa8>
    19ec:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    19f0:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_zero>
    19f4:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>

000019f8 <exp>:
    19f8:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_splitA>
    19fc:	a8 f3       	brcs	.-22     	; 0x19e8 <pow+0xa0>
    19fe:	96 38       	cpi	r25, 0x86	; 134
    1a00:	a0 f7       	brcc	.-24     	; 0x19ea <pow+0xa2>
    1a02:	07 f8       	bld	r0, 7
    1a04:	0f 92       	push	r0
    1a06:	e8 94       	clt
    1a08:	2b e3       	ldi	r18, 0x3B	; 59
    1a0a:	3a ea       	ldi	r19, 0xAA	; 170
    1a0c:	48 eb       	ldi	r20, 0xB8	; 184
    1a0e:	5f e7       	ldi	r21, 0x7F	; 127
    1a10:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulsf3_pse>
    1a14:	0f 92       	push	r0
    1a16:	0f 92       	push	r0
    1a18:	0f 92       	push	r0
    1a1a:	4d b7       	in	r20, 0x3d	; 61
    1a1c:	5e b7       	in	r21, 0x3e	; 62
    1a1e:	0f 92       	push	r0
    1a20:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <modf>
    1a24:	e8 e6       	ldi	r30, 0x68	; 104
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_powser>
    1a2c:	4f 91       	pop	r20
    1a2e:	5f 91       	pop	r21
    1a30:	ef 91       	pop	r30
    1a32:	ff 91       	pop	r31
    1a34:	e5 95       	asr	r30
    1a36:	ee 1f       	adc	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	49 f0       	breq	.+18     	; 0x1a4e <exp+0x56>
    1a3c:	fe 57       	subi	r31, 0x7E	; 126
    1a3e:	e0 68       	ori	r30, 0x80	; 128
    1a40:	44 27       	eor	r20, r20
    1a42:	ee 0f       	add	r30, r30
    1a44:	44 1f       	adc	r20, r20
    1a46:	fa 95       	dec	r31
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <exp+0x4a>
    1a4a:	41 95       	neg	r20
    1a4c:	55 0b       	sbc	r21, r21
    1a4e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <ldexp>
    1a52:	0f 90       	pop	r0
    1a54:	07 fe       	sbrs	r0, 7
    1a56:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <inverse>
    1a5a:	08 95       	ret

00001a5c <__fp_powser>:
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	1f 93       	push	r17
    1a62:	0f 93       	push	r16
    1a64:	ff 92       	push	r15
    1a66:	ef 92       	push	r14
    1a68:	df 92       	push	r13
    1a6a:	7b 01       	movw	r14, r22
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	68 94       	set
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <__fp_powser+0x22>
    1a72:	da 2e       	mov	r13, r26
    1a74:	ef 01       	movw	r28, r30
    1a76:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3x>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e8 94       	clt
    1a7e:	a5 91       	lpm	r26, Z+
    1a80:	25 91       	lpm	r18, Z+
    1a82:	35 91       	lpm	r19, Z+
    1a84:	45 91       	lpm	r20, Z+
    1a86:	55 91       	lpm	r21, Z+
    1a88:	a6 f3       	brts	.-24     	; 0x1a72 <__fp_powser+0x16>
    1a8a:	ef 01       	movw	r28, r30
    1a8c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__addsf3x>
    1a90:	fe 01       	movw	r30, r28
    1a92:	97 01       	movw	r18, r14
    1a94:	a8 01       	movw	r20, r16
    1a96:	da 94       	dec	r13
    1a98:	69 f7       	brne	.-38     	; 0x1a74 <__fp_powser+0x18>
    1a9a:	df 90       	pop	r13
    1a9c:	ef 90       	pop	r14
    1a9e:	ff 90       	pop	r15
    1aa0:	0f 91       	pop	r16
    1aa2:	1f 91       	pop	r17
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <inverse>:
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	80 e8       	ldi	r24, 0x80	; 128
    1ab4:	9f e3       	ldi	r25, 0x3F	; 63
    1ab6:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__divsf3>
    1aba:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    1abe:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_mpack>

00001ac2 <ldexp>:
    1ac2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_splitA>
    1ac6:	d8 f3       	brcs	.-10     	; 0x1abe <inverse+0x14>
    1ac8:	99 23       	and	r25, r25
    1aca:	c9 f3       	breq	.-14     	; 0x1abe <inverse+0x14>
    1acc:	94 0f       	add	r25, r20
    1ace:	51 1d       	adc	r21, r1
    1ad0:	a3 f3       	brvs	.-24     	; 0x1aba <inverse+0x10>
    1ad2:	91 50       	subi	r25, 0x01	; 1
    1ad4:	50 40       	sbci	r21, 0x00	; 0
    1ad6:	94 f0       	brlt	.+36     	; 0x1afc <ldexp+0x3a>
    1ad8:	59 f0       	breq	.+22     	; 0x1af0 <ldexp+0x2e>
    1ada:	88 23       	and	r24, r24
    1adc:	32 f0       	brmi	.+12     	; 0x1aea <ldexp+0x28>
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	91 50       	subi	r25, 0x01	; 1
    1ae6:	50 40       	sbci	r21, 0x00	; 0
    1ae8:	c1 f7       	brne	.-16     	; 0x1ada <ldexp+0x18>
    1aea:	9e 3f       	cpi	r25, 0xFE	; 254
    1aec:	51 05       	cpc	r21, r1
    1aee:	2c f7       	brge	.-54     	; 0x1aba <inverse+0x10>
    1af0:	88 0f       	add	r24, r24
    1af2:	91 1d       	adc	r25, r1
    1af4:	96 95       	lsr	r25
    1af6:	87 95       	ror	r24
    1af8:	97 f9       	bld	r25, 7
    1afa:	08 95       	ret
    1afc:	5f 3f       	cpi	r21, 0xFF	; 255
    1afe:	ac f0       	brlt	.+42     	; 0x1b2a <ldexp+0x68>
    1b00:	98 3e       	cpi	r25, 0xE8	; 232
    1b02:	9c f0       	brlt	.+38     	; 0x1b2a <ldexp+0x68>
    1b04:	bb 27       	eor	r27, r27
    1b06:	86 95       	lsr	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	b7 95       	ror	r27
    1b0e:	08 f4       	brcc	.+2      	; 0x1b12 <ldexp+0x50>
    1b10:	b1 60       	ori	r27, 0x01	; 1
    1b12:	93 95       	inc	r25
    1b14:	c1 f7       	brne	.-16     	; 0x1b06 <ldexp+0x44>
    1b16:	bb 0f       	add	r27, r27
    1b18:	58 f7       	brcc	.-42     	; 0x1af0 <ldexp+0x2e>
    1b1a:	11 f4       	brne	.+4      	; 0x1b20 <ldexp+0x5e>
    1b1c:	60 ff       	sbrs	r22, 0
    1b1e:	e8 cf       	rjmp	.-48     	; 0x1af0 <ldexp+0x2e>
    1b20:	6f 5f       	subi	r22, 0xFF	; 255
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	8f 4f       	sbci	r24, 0xFF	; 255
    1b26:	9f 4f       	sbci	r25, 0xFF	; 255
    1b28:	e3 cf       	rjmp	.-58     	; 0x1af0 <ldexp+0x2e>
    1b2a:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    1b2e:	16 f0       	brts	.+4      	; 0x1b34 <ldexp+0x72>
    1b30:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_mpack>
    1b34:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>
    1b38:	68 94       	set
    1b3a:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>

00001b3e <log>:
    1b3e:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_splitA>
    1b42:	a8 f3       	brcs	.-22     	; 0x1b2e <ldexp+0x6c>
    1b44:	99 23       	and	r25, r25
    1b46:	c1 f3       	breq	.-16     	; 0x1b38 <ldexp+0x76>
    1b48:	ae f3       	brts	.-22     	; 0x1b34 <ldexp+0x72>
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	1f 93       	push	r17
    1b50:	0f 93       	push	r16
    1b52:	ff 92       	push	r15
    1b54:	c9 2f       	mov	r28, r25
    1b56:	dd 27       	eor	r29, r29
    1b58:	88 23       	and	r24, r24
    1b5a:	2a f0       	brmi	.+10     	; 0x1b66 <log+0x28>
    1b5c:	21 97       	sbiw	r28, 0x01	; 1
    1b5e:	66 0f       	add	r22, r22
    1b60:	77 1f       	adc	r23, r23
    1b62:	88 1f       	adc	r24, r24
    1b64:	da f7       	brpl	.-10     	; 0x1b5c <log+0x1e>
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f eb       	ldi	r21, 0xBF	; 191
    1b6e:	9f e3       	ldi	r25, 0x3F	; 63
    1b70:	88 39       	cpi	r24, 0x98	; 152
    1b72:	20 f0       	brcs	.+8      	; 0x1b7c <log+0x3e>
    1b74:	80 3e       	cpi	r24, 0xE0	; 224
    1b76:	38 f0       	brcs	.+14     	; 0x1b86 <log+0x48>
    1b78:	21 96       	adiw	r28, 0x01	; 1
    1b7a:	8f 77       	andi	r24, 0x7F	; 127
    1b7c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
    1b80:	e0 e9       	ldi	r30, 0x90	; 144
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <log+0x50>
    1b86:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
    1b8a:	ed eb       	ldi	r30, 0xBD	; 189
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_powser>
    1b92:	8b 01       	movw	r16, r22
    1b94:	be 01       	movw	r22, r28
    1b96:	ec 01       	movw	r28, r24
    1b98:	fb 2e       	mov	r15, r27
    1b9a:	6f 57       	subi	r22, 0x7F	; 127
    1b9c:	71 09       	sbc	r23, r1
    1b9e:	75 95       	asr	r23
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 0b       	sbc	r24, r24
    1ba4:	99 0b       	sbc	r25, r25
    1ba6:	0e 94 82 0b 	call	0x1704	; 0x1704 <__floatsisf>
    1baa:	28 e1       	ldi	r18, 0x18	; 24
    1bac:	32 e7       	ldi	r19, 0x72	; 114
    1bae:	41 e3       	ldi	r20, 0x31	; 49
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__mulsf3x>
    1bb6:	af 2d       	mov	r26, r15
    1bb8:	98 01       	movw	r18, r16
    1bba:	ae 01       	movw	r20, r28
    1bbc:	ff 90       	pop	r15
    1bbe:	0f 91       	pop	r16
    1bc0:	1f 91       	pop	r17
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__addsf3x>
    1bca:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>

00001bce <modf>:
    1bce:	fa 01       	movw	r30, r20
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	aa 0f       	add	r26, r26
    1bd4:	bb 1f       	adc	r27, r27
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	bf 57       	subi	r27, 0x7F	; 127
    1bdc:	28 f4       	brcc	.+10     	; 0x1be8 <modf+0x1a>
    1bde:	22 27       	eor	r18, r18
    1be0:	33 27       	eor	r19, r19
    1be2:	44 27       	eor	r20, r20
    1be4:	50 78       	andi	r21, 0x80	; 128
    1be6:	20 c0       	rjmp	.+64     	; 0x1c28 <modf+0x5a>
    1be8:	b7 51       	subi	r27, 0x17	; 23
    1bea:	90 f4       	brcc	.+36     	; 0x1c10 <modf+0x42>
    1bec:	ab 2f       	mov	r26, r27
    1bee:	00 24       	eor	r0, r0
    1bf0:	46 95       	lsr	r20
    1bf2:	37 95       	ror	r19
    1bf4:	27 95       	ror	r18
    1bf6:	01 1c       	adc	r0, r1
    1bf8:	a3 95       	inc	r26
    1bfa:	d2 f3       	brmi	.-12     	; 0x1bf0 <modf+0x22>
    1bfc:	00 20       	and	r0, r0
    1bfe:	71 f0       	breq	.+28     	; 0x1c1c <modf+0x4e>
    1c00:	22 0f       	add	r18, r18
    1c02:	33 1f       	adc	r19, r19
    1c04:	44 1f       	adc	r20, r20
    1c06:	b3 95       	inc	r27
    1c08:	da f3       	brmi	.-10     	; 0x1c00 <modf+0x32>
    1c0a:	0e d0       	rcall	.+28     	; 0x1c28 <modf+0x5a>
    1c0c:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__subsf3>
    1c10:	61 30       	cpi	r22, 0x01	; 1
    1c12:	71 05       	cpc	r23, r1
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	8a 07       	cpc	r24, r26
    1c18:	b9 46       	sbci	r27, 0x69	; 105
    1c1a:	30 f4       	brcc	.+12     	; 0x1c28 <modf+0x5a>
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	66 27       	eor	r22, r22
    1c22:	77 27       	eor	r23, r23
    1c24:	88 27       	eor	r24, r24
    1c26:	90 78       	andi	r25, 0x80	; 128
    1c28:	30 96       	adiw	r30, 0x00	; 0
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <modf+0x66>
    1c2c:	20 83       	st	Z, r18
    1c2e:	31 83       	std	Z+1, r19	; 0x01
    1c30:	42 83       	std	Z+2, r20	; 0x02
    1c32:	53 83       	std	Z+3, r21	; 0x03
    1c34:	08 95       	ret

00001c36 <__fp_mpack>:
    1c36:	9f 3f       	cpi	r25, 0xFF	; 255
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <__fp_mpack_finite+0xc>

00001c3a <__fp_mpack_finite>:
    1c3a:	91 50       	subi	r25, 0x01	; 1
    1c3c:	20 f4       	brcc	.+8      	; 0x1c46 <__fp_mpack_finite+0xc>
    1c3e:	87 95       	ror	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	b7 95       	ror	r27
    1c46:	88 0f       	add	r24, r24
    1c48:	91 1d       	adc	r25, r1
    1c4a:	96 95       	lsr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	97 f9       	bld	r25, 7
    1c50:	08 95       	ret

00001c52 <strcmp>:
    1c52:	fb 01       	movw	r30, r22
    1c54:	dc 01       	movw	r26, r24
    1c56:	8d 91       	ld	r24, X+
    1c58:	01 90       	ld	r0, Z+
    1c5a:	80 19       	sub	r24, r0
    1c5c:	01 10       	cpse	r0, r1
    1c5e:	d9 f3       	breq	.-10     	; 0x1c56 <strcmp+0x4>
    1c60:	99 0b       	sbc	r25, r25
    1c62:	08 95       	ret

00001c64 <strcpy>:
    1c64:	fb 01       	movw	r30, r22
    1c66:	dc 01       	movw	r26, r24
    1c68:	01 90       	ld	r0, Z+
    1c6a:	0d 92       	st	X+, r0
    1c6c:	00 20       	and	r0, r0
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <strcpy+0x4>
    1c70:	08 95       	ret

00001c72 <printf>:
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ef e3       	ldi	r30, 0x3F	; 63
    1c78:	fe e0       	ldi	r31, 0x0E	; 14
    1c7a:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__prologue_saves__+0x20>
    1c7e:	ae 01       	movw	r20, r28
    1c80:	4b 5f       	subi	r20, 0xFB	; 251
    1c82:	5f 4f       	sbci	r21, 0xFF	; 255
    1c84:	fa 01       	movw	r30, r20
    1c86:	61 91       	ld	r22, Z+
    1c88:	71 91       	ld	r23, Z+
    1c8a:	af 01       	movw	r20, r30
    1c8c:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <__iob+0x2>
    1c90:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <__iob+0x3>
    1c94:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <vfprintf>
    1c98:	e2 e0       	ldi	r30, 0x02	; 2
    1c9a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__epilogue_restores__+0x20>

00001c9e <puts>:
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <__iob+0x2>
    1caa:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <__iob+0x3>
    1cae:	23 81       	ldd	r18, Z+3	; 0x03
    1cb0:	21 ff       	sbrs	r18, 1
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <puts+0x4c>
    1cb4:	8c 01       	movw	r16, r24
    1cb6:	d0 e0       	ldi	r29, 0x00	; 0
    1cb8:	c0 e0       	ldi	r28, 0x00	; 0
    1cba:	f8 01       	movw	r30, r16
    1cbc:	81 91       	ld	r24, Z+
    1cbe:	8f 01       	movw	r16, r30
    1cc0:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <__iob+0x2>
    1cc4:	70 91 17 04 	lds	r23, 0x0417	; 0x800417 <__iob+0x3>
    1cc8:	db 01       	movw	r26, r22
    1cca:	18 96       	adiw	r26, 0x08	; 8
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	19 97       	sbiw	r26, 0x09	; 9
    1cd2:	88 23       	and	r24, r24
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <puts+0x44>
    1cd6:	09 95       	icall
    1cd8:	89 2b       	or	r24, r25
    1cda:	79 f3       	breq	.-34     	; 0x1cba <puts+0x1c>
    1cdc:	df ef       	ldi	r29, 0xFF	; 255
    1cde:	cf ef       	ldi	r28, 0xFF	; 255
    1ce0:	ec cf       	rjmp	.-40     	; 0x1cba <puts+0x1c>
    1ce2:	8a e0       	ldi	r24, 0x0A	; 10
    1ce4:	09 95       	icall
    1ce6:	89 2b       	or	r24, r25
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <puts+0x52>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	9f ef       	ldi	r25, 0xFF	; 255
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <puts+0x56>
    1cf0:	8d 2f       	mov	r24, r29
    1cf2:	9c 2f       	mov	r25, r28
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <vfprintf>:
    1cfe:	ab e0       	ldi	r26, 0x0B	; 11
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e8       	ldi	r30, 0x85	; 133
    1d04:	fe e0       	ldi	r31, 0x0E	; 14
    1d06:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__prologue_saves__>
    1d0a:	6c 01       	movw	r12, r24
    1d0c:	7b 01       	movw	r14, r22
    1d0e:	8a 01       	movw	r16, r20
    1d10:	fc 01       	movw	r30, r24
    1d12:	17 82       	std	Z+7, r1	; 0x07
    1d14:	16 82       	std	Z+6, r1	; 0x06
    1d16:	83 81       	ldd	r24, Z+3	; 0x03
    1d18:	81 ff       	sbrs	r24, 1
    1d1a:	cc c1       	rjmp	.+920    	; 0x20b4 <vfprintf+0x3b6>
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	3c 01       	movw	r6, r24
    1d22:	f6 01       	movw	r30, r12
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	f7 01       	movw	r30, r14
    1d28:	93 fd       	sbrc	r25, 3
    1d2a:	85 91       	lpm	r24, Z+
    1d2c:	93 ff       	sbrs	r25, 3
    1d2e:	81 91       	ld	r24, Z+
    1d30:	7f 01       	movw	r14, r30
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <vfprintf+0x3a>
    1d36:	ba c1       	rjmp	.+884    	; 0x20ac <vfprintf+0x3ae>
    1d38:	85 32       	cpi	r24, 0x25	; 37
    1d3a:	39 f4       	brne	.+14     	; 0x1d4a <vfprintf+0x4c>
    1d3c:	93 fd       	sbrc	r25, 3
    1d3e:	85 91       	lpm	r24, Z+
    1d40:	93 ff       	sbrs	r25, 3
    1d42:	81 91       	ld	r24, Z+
    1d44:	7f 01       	movw	r14, r30
    1d46:	85 32       	cpi	r24, 0x25	; 37
    1d48:	29 f4       	brne	.+10     	; 0x1d54 <vfprintf+0x56>
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    1d52:	e7 cf       	rjmp	.-50     	; 0x1d22 <vfprintf+0x24>
    1d54:	91 2c       	mov	r9, r1
    1d56:	21 2c       	mov	r2, r1
    1d58:	31 2c       	mov	r3, r1
    1d5a:	ff e1       	ldi	r31, 0x1F	; 31
    1d5c:	f3 15       	cp	r31, r3
    1d5e:	d8 f0       	brcs	.+54     	; 0x1d96 <vfprintf+0x98>
    1d60:	8b 32       	cpi	r24, 0x2B	; 43
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <vfprintf+0x84>
    1d64:	38 f4       	brcc	.+14     	; 0x1d74 <vfprintf+0x76>
    1d66:	80 32       	cpi	r24, 0x20	; 32
    1d68:	79 f0       	breq	.+30     	; 0x1d88 <vfprintf+0x8a>
    1d6a:	83 32       	cpi	r24, 0x23	; 35
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <vfprintf+0x98>
    1d6e:	23 2d       	mov	r18, r3
    1d70:	20 61       	ori	r18, 0x10	; 16
    1d72:	1d c0       	rjmp	.+58     	; 0x1dae <vfprintf+0xb0>
    1d74:	8d 32       	cpi	r24, 0x2D	; 45
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <vfprintf+0x92>
    1d78:	80 33       	cpi	r24, 0x30	; 48
    1d7a:	69 f4       	brne	.+26     	; 0x1d96 <vfprintf+0x98>
    1d7c:	23 2d       	mov	r18, r3
    1d7e:	21 60       	ori	r18, 0x01	; 1
    1d80:	16 c0       	rjmp	.+44     	; 0x1dae <vfprintf+0xb0>
    1d82:	83 2d       	mov	r24, r3
    1d84:	82 60       	ori	r24, 0x02	; 2
    1d86:	38 2e       	mov	r3, r24
    1d88:	e3 2d       	mov	r30, r3
    1d8a:	e4 60       	ori	r30, 0x04	; 4
    1d8c:	3e 2e       	mov	r3, r30
    1d8e:	2a c0       	rjmp	.+84     	; 0x1de4 <vfprintf+0xe6>
    1d90:	f3 2d       	mov	r31, r3
    1d92:	f8 60       	ori	r31, 0x08	; 8
    1d94:	1d c0       	rjmp	.+58     	; 0x1dd0 <vfprintf+0xd2>
    1d96:	37 fc       	sbrc	r3, 7
    1d98:	2d c0       	rjmp	.+90     	; 0x1df4 <vfprintf+0xf6>
    1d9a:	20 ed       	ldi	r18, 0xD0	; 208
    1d9c:	28 0f       	add	r18, r24
    1d9e:	2a 30       	cpi	r18, 0x0A	; 10
    1da0:	40 f0       	brcs	.+16     	; 0x1db2 <vfprintf+0xb4>
    1da2:	8e 32       	cpi	r24, 0x2E	; 46
    1da4:	b9 f4       	brne	.+46     	; 0x1dd4 <vfprintf+0xd6>
    1da6:	36 fc       	sbrc	r3, 6
    1da8:	81 c1       	rjmp	.+770    	; 0x20ac <vfprintf+0x3ae>
    1daa:	23 2d       	mov	r18, r3
    1dac:	20 64       	ori	r18, 0x40	; 64
    1dae:	32 2e       	mov	r3, r18
    1db0:	19 c0       	rjmp	.+50     	; 0x1de4 <vfprintf+0xe6>
    1db2:	36 fe       	sbrs	r3, 6
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <vfprintf+0xc4>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	98 9e       	mul	r9, r24
    1dba:	20 0d       	add	r18, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	92 2e       	mov	r9, r18
    1dc0:	11 c0       	rjmp	.+34     	; 0x1de4 <vfprintf+0xe6>
    1dc2:	ea e0       	ldi	r30, 0x0A	; 10
    1dc4:	2e 9e       	mul	r2, r30
    1dc6:	20 0d       	add	r18, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	22 2e       	mov	r2, r18
    1dcc:	f3 2d       	mov	r31, r3
    1dce:	f0 62       	ori	r31, 0x20	; 32
    1dd0:	3f 2e       	mov	r3, r31
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <vfprintf+0xe6>
    1dd4:	8c 36       	cpi	r24, 0x6C	; 108
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <vfprintf+0xe2>
    1dd8:	83 2d       	mov	r24, r3
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	38 2e       	mov	r3, r24
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <vfprintf+0xe6>
    1de0:	88 36       	cpi	r24, 0x68	; 104
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <vfprintf+0xf6>
    1de4:	f7 01       	movw	r30, r14
    1de6:	93 fd       	sbrc	r25, 3
    1de8:	85 91       	lpm	r24, Z+
    1dea:	93 ff       	sbrs	r25, 3
    1dec:	81 91       	ld	r24, Z+
    1dee:	7f 01       	movw	r14, r30
    1df0:	81 11       	cpse	r24, r1
    1df2:	b3 cf       	rjmp	.-154    	; 0x1d5a <vfprintf+0x5c>
    1df4:	98 2f       	mov	r25, r24
    1df6:	9f 7d       	andi	r25, 0xDF	; 223
    1df8:	95 54       	subi	r25, 0x45	; 69
    1dfa:	93 30       	cpi	r25, 0x03	; 3
    1dfc:	28 f4       	brcc	.+10     	; 0x1e08 <vfprintf+0x10a>
    1dfe:	0c 5f       	subi	r16, 0xFC	; 252
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	9f e3       	ldi	r25, 0x3F	; 63
    1e04:	99 83       	std	Y+1, r25	; 0x01
    1e06:	0d c0       	rjmp	.+26     	; 0x1e22 <vfprintf+0x124>
    1e08:	83 36       	cpi	r24, 0x63	; 99
    1e0a:	31 f0       	breq	.+12     	; 0x1e18 <vfprintf+0x11a>
    1e0c:	83 37       	cpi	r24, 0x73	; 115
    1e0e:	71 f0       	breq	.+28     	; 0x1e2c <vfprintf+0x12e>
    1e10:	83 35       	cpi	r24, 0x53	; 83
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <vfprintf+0x118>
    1e14:	59 c0       	rjmp	.+178    	; 0x1ec8 <vfprintf+0x1ca>
    1e16:	21 c0       	rjmp	.+66     	; 0x1e5a <vfprintf+0x15c>
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 81       	ld	r24, Z
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	88 24       	eor	r8, r8
    1e24:	83 94       	inc	r8
    1e26:	91 2c       	mov	r9, r1
    1e28:	53 01       	movw	r10, r6
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <vfprintf+0x154>
    1e2c:	28 01       	movw	r4, r16
    1e2e:	f2 e0       	ldi	r31, 0x02	; 2
    1e30:	4f 0e       	add	r4, r31
    1e32:	51 1c       	adc	r5, r1
    1e34:	f8 01       	movw	r30, r16
    1e36:	a0 80       	ld	r10, Z
    1e38:	b1 80       	ldd	r11, Z+1	; 0x01
    1e3a:	36 fe       	sbrs	r3, 6
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <vfprintf+0x146>
    1e3e:	69 2d       	mov	r22, r9
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <vfprintf+0x14a>
    1e44:	6f ef       	ldi	r22, 0xFF	; 255
    1e46:	7f ef       	ldi	r23, 0xFF	; 255
    1e48:	c5 01       	movw	r24, r10
    1e4a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <strnlen>
    1e4e:	4c 01       	movw	r8, r24
    1e50:	82 01       	movw	r16, r4
    1e52:	f3 2d       	mov	r31, r3
    1e54:	ff 77       	andi	r31, 0x7F	; 127
    1e56:	3f 2e       	mov	r3, r31
    1e58:	16 c0       	rjmp	.+44     	; 0x1e86 <vfprintf+0x188>
    1e5a:	28 01       	movw	r4, r16
    1e5c:	22 e0       	ldi	r18, 0x02	; 2
    1e5e:	42 0e       	add	r4, r18
    1e60:	51 1c       	adc	r5, r1
    1e62:	f8 01       	movw	r30, r16
    1e64:	a0 80       	ld	r10, Z
    1e66:	b1 80       	ldd	r11, Z+1	; 0x01
    1e68:	36 fe       	sbrs	r3, 6
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <vfprintf+0x174>
    1e6c:	69 2d       	mov	r22, r9
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <vfprintf+0x178>
    1e72:	6f ef       	ldi	r22, 0xFF	; 255
    1e74:	7f ef       	ldi	r23, 0xFF	; 255
    1e76:	c5 01       	movw	r24, r10
    1e78:	0e 94 60 10 	call	0x20c0	; 0x20c0 <strnlen_P>
    1e7c:	4c 01       	movw	r8, r24
    1e7e:	f3 2d       	mov	r31, r3
    1e80:	f0 68       	ori	r31, 0x80	; 128
    1e82:	3f 2e       	mov	r3, r31
    1e84:	82 01       	movw	r16, r4
    1e86:	33 fc       	sbrc	r3, 3
    1e88:	1b c0       	rjmp	.+54     	; 0x1ec0 <vfprintf+0x1c2>
    1e8a:	82 2d       	mov	r24, r2
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	88 16       	cp	r8, r24
    1e90:	99 06       	cpc	r9, r25
    1e92:	b0 f4       	brcc	.+44     	; 0x1ec0 <vfprintf+0x1c2>
    1e94:	b6 01       	movw	r22, r12
    1e96:	80 e2       	ldi	r24, 0x20	; 32
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    1e9e:	2a 94       	dec	r2
    1ea0:	f4 cf       	rjmp	.-24     	; 0x1e8a <vfprintf+0x18c>
    1ea2:	f5 01       	movw	r30, r10
    1ea4:	37 fc       	sbrc	r3, 7
    1ea6:	85 91       	lpm	r24, Z+
    1ea8:	37 fe       	sbrs	r3, 7
    1eaa:	81 91       	ld	r24, Z+
    1eac:	5f 01       	movw	r10, r30
    1eae:	b6 01       	movw	r22, r12
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    1eb6:	21 10       	cpse	r2, r1
    1eb8:	2a 94       	dec	r2
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	82 1a       	sub	r8, r18
    1ebe:	91 08       	sbc	r9, r1
    1ec0:	81 14       	cp	r8, r1
    1ec2:	91 04       	cpc	r9, r1
    1ec4:	71 f7       	brne	.-36     	; 0x1ea2 <vfprintf+0x1a4>
    1ec6:	e8 c0       	rjmp	.+464    	; 0x2098 <vfprintf+0x39a>
    1ec8:	84 36       	cpi	r24, 0x64	; 100
    1eca:	11 f0       	breq	.+4      	; 0x1ed0 <vfprintf+0x1d2>
    1ecc:	89 36       	cpi	r24, 0x69	; 105
    1ece:	41 f5       	brne	.+80     	; 0x1f20 <vfprintf+0x222>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	37 fe       	sbrs	r3, 7
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <vfprintf+0x1e6>
    1ed6:	60 81       	ld	r22, Z
    1ed8:	71 81       	ldd	r23, Z+1	; 0x01
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	0c 5f       	subi	r16, 0xFC	; 252
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <vfprintf+0x1f6>
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	07 2e       	mov	r0, r23
    1eea:	00 0c       	add	r0, r0
    1eec:	88 0b       	sbc	r24, r24
    1eee:	99 0b       	sbc	r25, r25
    1ef0:	0e 5f       	subi	r16, 0xFE	; 254
    1ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef4:	f3 2d       	mov	r31, r3
    1ef6:	ff 76       	andi	r31, 0x6F	; 111
    1ef8:	3f 2e       	mov	r3, r31
    1efa:	97 ff       	sbrs	r25, 7
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <vfprintf+0x212>
    1efe:	90 95       	com	r25
    1f00:	80 95       	com	r24
    1f02:	70 95       	com	r23
    1f04:	61 95       	neg	r22
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	f0 68       	ori	r31, 0x80	; 128
    1f0e:	3f 2e       	mov	r3, r31
    1f10:	2a e0       	ldi	r18, 0x0A	; 10
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	a3 01       	movw	r20, r6
    1f16:	0e 94 b2 10 	call	0x2164	; 0x2164 <__ultoa_invert>
    1f1a:	88 2e       	mov	r8, r24
    1f1c:	86 18       	sub	r8, r6
    1f1e:	45 c0       	rjmp	.+138    	; 0x1faa <vfprintf+0x2ac>
    1f20:	85 37       	cpi	r24, 0x75	; 117
    1f22:	31 f4       	brne	.+12     	; 0x1f30 <vfprintf+0x232>
    1f24:	23 2d       	mov	r18, r3
    1f26:	2f 7e       	andi	r18, 0xEF	; 239
    1f28:	b2 2e       	mov	r11, r18
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	25 c0       	rjmp	.+74     	; 0x1f7a <vfprintf+0x27c>
    1f30:	93 2d       	mov	r25, r3
    1f32:	99 7f       	andi	r25, 0xF9	; 249
    1f34:	b9 2e       	mov	r11, r25
    1f36:	8f 36       	cpi	r24, 0x6F	; 111
    1f38:	c1 f0       	breq	.+48     	; 0x1f6a <vfprintf+0x26c>
    1f3a:	18 f4       	brcc	.+6      	; 0x1f42 <vfprintf+0x244>
    1f3c:	88 35       	cpi	r24, 0x58	; 88
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <vfprintf+0x260>
    1f40:	b5 c0       	rjmp	.+362    	; 0x20ac <vfprintf+0x3ae>
    1f42:	80 37       	cpi	r24, 0x70	; 112
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <vfprintf+0x24e>
    1f46:	88 37       	cpi	r24, 0x78	; 120
    1f48:	21 f0       	breq	.+8      	; 0x1f52 <vfprintf+0x254>
    1f4a:	b0 c0       	rjmp	.+352    	; 0x20ac <vfprintf+0x3ae>
    1f4c:	e9 2f       	mov	r30, r25
    1f4e:	e0 61       	ori	r30, 0x10	; 16
    1f50:	be 2e       	mov	r11, r30
    1f52:	b4 fe       	sbrs	r11, 4
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <vfprintf+0x272>
    1f56:	fb 2d       	mov	r31, r11
    1f58:	f4 60       	ori	r31, 0x04	; 4
    1f5a:	bf 2e       	mov	r11, r31
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <vfprintf+0x272>
    1f5e:	34 fe       	sbrs	r3, 4
    1f60:	0a c0       	rjmp	.+20     	; 0x1f76 <vfprintf+0x278>
    1f62:	29 2f       	mov	r18, r25
    1f64:	26 60       	ori	r18, 0x06	; 6
    1f66:	b2 2e       	mov	r11, r18
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <vfprintf+0x278>
    1f6a:	28 e0       	ldi	r18, 0x08	; 8
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <vfprintf+0x27c>
    1f70:	20 e1       	ldi	r18, 0x10	; 16
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <vfprintf+0x27c>
    1f76:	20 e1       	ldi	r18, 0x10	; 16
    1f78:	32 e0       	ldi	r19, 0x02	; 2
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	b7 fe       	sbrs	r11, 7
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <vfprintf+0x290>
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0c 5f       	subi	r16, 0xFC	; 252
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <vfprintf+0x29c>
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 5f       	subi	r16, 0xFE	; 254
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	a3 01       	movw	r20, r6
    1f9c:	0e 94 b2 10 	call	0x2164	; 0x2164 <__ultoa_invert>
    1fa0:	88 2e       	mov	r8, r24
    1fa2:	86 18       	sub	r8, r6
    1fa4:	fb 2d       	mov	r31, r11
    1fa6:	ff 77       	andi	r31, 0x7F	; 127
    1fa8:	3f 2e       	mov	r3, r31
    1faa:	36 fe       	sbrs	r3, 6
    1fac:	0d c0       	rjmp	.+26     	; 0x1fc8 <vfprintf+0x2ca>
    1fae:	23 2d       	mov	r18, r3
    1fb0:	2e 7f       	andi	r18, 0xFE	; 254
    1fb2:	a2 2e       	mov	r10, r18
    1fb4:	89 14       	cp	r8, r9
    1fb6:	58 f4       	brcc	.+22     	; 0x1fce <vfprintf+0x2d0>
    1fb8:	34 fe       	sbrs	r3, 4
    1fba:	0b c0       	rjmp	.+22     	; 0x1fd2 <vfprintf+0x2d4>
    1fbc:	32 fc       	sbrc	r3, 2
    1fbe:	09 c0       	rjmp	.+18     	; 0x1fd2 <vfprintf+0x2d4>
    1fc0:	83 2d       	mov	r24, r3
    1fc2:	8e 7e       	andi	r24, 0xEE	; 238
    1fc4:	a8 2e       	mov	r10, r24
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <vfprintf+0x2d4>
    1fc8:	b8 2c       	mov	r11, r8
    1fca:	a3 2c       	mov	r10, r3
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <vfprintf+0x2d6>
    1fce:	b8 2c       	mov	r11, r8
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <vfprintf+0x2d6>
    1fd2:	b9 2c       	mov	r11, r9
    1fd4:	a4 fe       	sbrs	r10, 4
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <vfprintf+0x2f8>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e8 0d       	add	r30, r8
    1fdc:	f1 1d       	adc	r31, r1
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 33       	cpi	r24, 0x30	; 48
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <vfprintf+0x2ee>
    1fe4:	9a 2d       	mov	r25, r10
    1fe6:	99 7e       	andi	r25, 0xE9	; 233
    1fe8:	a9 2e       	mov	r10, r25
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <vfprintf+0x300>
    1fec:	a2 fe       	sbrs	r10, 2
    1fee:	06 c0       	rjmp	.+12     	; 0x1ffc <vfprintf+0x2fe>
    1ff0:	b3 94       	inc	r11
    1ff2:	b3 94       	inc	r11
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <vfprintf+0x300>
    1ff6:	8a 2d       	mov	r24, r10
    1ff8:	86 78       	andi	r24, 0x86	; 134
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <vfprintf+0x300>
    1ffc:	b3 94       	inc	r11
    1ffe:	a3 fc       	sbrc	r10, 3
    2000:	11 c0       	rjmp	.+34     	; 0x2024 <vfprintf+0x326>
    2002:	a0 fe       	sbrs	r10, 0
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <vfprintf+0x314>
    2006:	b2 14       	cp	r11, r2
    2008:	88 f4       	brcc	.+34     	; 0x202c <vfprintf+0x32e>
    200a:	28 0c       	add	r2, r8
    200c:	92 2c       	mov	r9, r2
    200e:	9b 18       	sub	r9, r11
    2010:	0e c0       	rjmp	.+28     	; 0x202e <vfprintf+0x330>
    2012:	b2 14       	cp	r11, r2
    2014:	60 f4       	brcc	.+24     	; 0x202e <vfprintf+0x330>
    2016:	b6 01       	movw	r22, r12
    2018:	80 e2       	ldi	r24, 0x20	; 32
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    2020:	b3 94       	inc	r11
    2022:	f7 cf       	rjmp	.-18     	; 0x2012 <vfprintf+0x314>
    2024:	b2 14       	cp	r11, r2
    2026:	18 f4       	brcc	.+6      	; 0x202e <vfprintf+0x330>
    2028:	2b 18       	sub	r2, r11
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <vfprintf+0x332>
    202c:	98 2c       	mov	r9, r8
    202e:	21 2c       	mov	r2, r1
    2030:	a4 fe       	sbrs	r10, 4
    2032:	10 c0       	rjmp	.+32     	; 0x2054 <vfprintf+0x356>
    2034:	b6 01       	movw	r22, r12
    2036:	80 e3       	ldi	r24, 0x30	; 48
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    203e:	a2 fe       	sbrs	r10, 2
    2040:	17 c0       	rjmp	.+46     	; 0x2070 <vfprintf+0x372>
    2042:	a1 fc       	sbrc	r10, 1
    2044:	03 c0       	rjmp	.+6      	; 0x204c <vfprintf+0x34e>
    2046:	88 e7       	ldi	r24, 0x78	; 120
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <vfprintf+0x352>
    204c:	88 e5       	ldi	r24, 0x58	; 88
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	b6 01       	movw	r22, r12
    2052:	0c c0       	rjmp	.+24     	; 0x206c <vfprintf+0x36e>
    2054:	8a 2d       	mov	r24, r10
    2056:	86 78       	andi	r24, 0x86	; 134
    2058:	59 f0       	breq	.+22     	; 0x2070 <vfprintf+0x372>
    205a:	a1 fe       	sbrs	r10, 1
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <vfprintf+0x364>
    205e:	8b e2       	ldi	r24, 0x2B	; 43
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <vfprintf+0x366>
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	a7 fc       	sbrc	r10, 7
    2066:	8d e2       	ldi	r24, 0x2D	; 45
    2068:	b6 01       	movw	r22, r12
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    2070:	89 14       	cp	r8, r9
    2072:	38 f4       	brcc	.+14     	; 0x2082 <vfprintf+0x384>
    2074:	b6 01       	movw	r22, r12
    2076:	80 e3       	ldi	r24, 0x30	; 48
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    207e:	9a 94       	dec	r9
    2080:	f7 cf       	rjmp	.-18     	; 0x2070 <vfprintf+0x372>
    2082:	8a 94       	dec	r8
    2084:	f3 01       	movw	r30, r6
    2086:	e8 0d       	add	r30, r8
    2088:	f1 1d       	adc	r31, r1
    208a:	80 81       	ld	r24, Z
    208c:	b6 01       	movw	r22, r12
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    2094:	81 10       	cpse	r8, r1
    2096:	f5 cf       	rjmp	.-22     	; 0x2082 <vfprintf+0x384>
    2098:	22 20       	and	r2, r2
    209a:	09 f4       	brne	.+2      	; 0x209e <vfprintf+0x3a0>
    209c:	42 ce       	rjmp	.-892    	; 0x1d22 <vfprintf+0x24>
    209e:	b6 01       	movw	r22, r12
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 76 10 	call	0x20ec	; 0x20ec <fputc>
    20a8:	2a 94       	dec	r2
    20aa:	f6 cf       	rjmp	.-20     	; 0x2098 <vfprintf+0x39a>
    20ac:	f6 01       	movw	r30, r12
    20ae:	86 81       	ldd	r24, Z+6	; 0x06
    20b0:	97 81       	ldd	r25, Z+7	; 0x07
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <vfprintf+0x3ba>
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	9f ef       	ldi	r25, 0xFF	; 255
    20b8:	2b 96       	adiw	r28, 0x0b	; 11
    20ba:	e2 e1       	ldi	r30, 0x12	; 18
    20bc:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__epilogue_restores__>

000020c0 <strnlen_P>:
    20c0:	fc 01       	movw	r30, r24
    20c2:	05 90       	lpm	r0, Z+
    20c4:	61 50       	subi	r22, 0x01	; 1
    20c6:	70 40       	sbci	r23, 0x00	; 0
    20c8:	01 10       	cpse	r0, r1
    20ca:	d8 f7       	brcc	.-10     	; 0x20c2 <strnlen_P+0x2>
    20cc:	80 95       	com	r24
    20ce:	90 95       	com	r25
    20d0:	8e 0f       	add	r24, r30
    20d2:	9f 1f       	adc	r25, r31
    20d4:	08 95       	ret

000020d6 <strnlen>:
    20d6:	fc 01       	movw	r30, r24
    20d8:	61 50       	subi	r22, 0x01	; 1
    20da:	70 40       	sbci	r23, 0x00	; 0
    20dc:	01 90       	ld	r0, Z+
    20de:	01 10       	cpse	r0, r1
    20e0:	d8 f7       	brcc	.-10     	; 0x20d8 <strnlen+0x2>
    20e2:	80 95       	com	r24
    20e4:	90 95       	com	r25
    20e6:	8e 0f       	add	r24, r30
    20e8:	9f 1f       	adc	r25, r31
    20ea:	08 95       	ret

000020ec <fputc>:
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	fb 01       	movw	r30, r22
    20f6:	23 81       	ldd	r18, Z+3	; 0x03
    20f8:	21 fd       	sbrc	r18, 1
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <fputc+0x16>
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
    20fe:	9f ef       	ldi	r25, 0xFF	; 255
    2100:	2c c0       	rjmp	.+88     	; 0x215a <fputc+0x6e>
    2102:	22 ff       	sbrs	r18, 2
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <fputc+0x46>
    2106:	46 81       	ldd	r20, Z+6	; 0x06
    2108:	57 81       	ldd	r21, Z+7	; 0x07
    210a:	24 81       	ldd	r18, Z+4	; 0x04
    210c:	35 81       	ldd	r19, Z+5	; 0x05
    210e:	42 17       	cp	r20, r18
    2110:	53 07       	cpc	r21, r19
    2112:	44 f4       	brge	.+16     	; 0x2124 <fputc+0x38>
    2114:	a0 81       	ld	r26, Z
    2116:	b1 81       	ldd	r27, Z+1	; 0x01
    2118:	9d 01       	movw	r18, r26
    211a:	2f 5f       	subi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	31 83       	std	Z+1, r19	; 0x01
    2120:	20 83       	st	Z, r18
    2122:	8c 93       	st	X, r24
    2124:	26 81       	ldd	r18, Z+6	; 0x06
    2126:	37 81       	ldd	r19, Z+7	; 0x07
    2128:	2f 5f       	subi	r18, 0xFF	; 255
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	37 83       	std	Z+7, r19	; 0x07
    212e:	26 83       	std	Z+6, r18	; 0x06
    2130:	14 c0       	rjmp	.+40     	; 0x215a <fputc+0x6e>
    2132:	8b 01       	movw	r16, r22
    2134:	ec 01       	movw	r28, r24
    2136:	fb 01       	movw	r30, r22
    2138:	00 84       	ldd	r0, Z+8	; 0x08
    213a:	f1 85       	ldd	r31, Z+9	; 0x09
    213c:	e0 2d       	mov	r30, r0
    213e:	09 95       	icall
    2140:	89 2b       	or	r24, r25
    2142:	e1 f6       	brne	.-72     	; 0x20fc <fputc+0x10>
    2144:	d8 01       	movw	r26, r16
    2146:	16 96       	adiw	r26, 0x06	; 6
    2148:	8d 91       	ld	r24, X+
    214a:	9c 91       	ld	r25, X
    214c:	17 97       	sbiw	r26, 0x07	; 7
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	17 96       	adiw	r26, 0x07	; 7
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	16 97       	sbiw	r26, 0x06	; 6
    2158:	ce 01       	movw	r24, r28
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <__ultoa_invert>:
    2164:	fa 01       	movw	r30, r20
    2166:	aa 27       	eor	r26, r26
    2168:	28 30       	cpi	r18, 0x08	; 8
    216a:	51 f1       	breq	.+84     	; 0x21c0 <__ultoa_invert+0x5c>
    216c:	20 31       	cpi	r18, 0x10	; 16
    216e:	81 f1       	breq	.+96     	; 0x21d0 <__ultoa_invert+0x6c>
    2170:	e8 94       	clt
    2172:	6f 93       	push	r22
    2174:	6e 7f       	andi	r22, 0xFE	; 254
    2176:	6e 5f       	subi	r22, 0xFE	; 254
    2178:	7f 4f       	sbci	r23, 0xFF	; 255
    217a:	8f 4f       	sbci	r24, 0xFF	; 255
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	af 4f       	sbci	r26, 0xFF	; 255
    2180:	b1 e0       	ldi	r27, 0x01	; 1
    2182:	3e d0       	rcall	.+124    	; 0x2200 <__ultoa_invert+0x9c>
    2184:	b4 e0       	ldi	r27, 0x04	; 4
    2186:	3c d0       	rcall	.+120    	; 0x2200 <__ultoa_invert+0x9c>
    2188:	67 0f       	add	r22, r23
    218a:	78 1f       	adc	r23, r24
    218c:	89 1f       	adc	r24, r25
    218e:	9a 1f       	adc	r25, r26
    2190:	a1 1d       	adc	r26, r1
    2192:	68 0f       	add	r22, r24
    2194:	79 1f       	adc	r23, r25
    2196:	8a 1f       	adc	r24, r26
    2198:	91 1d       	adc	r25, r1
    219a:	a1 1d       	adc	r26, r1
    219c:	6a 0f       	add	r22, r26
    219e:	71 1d       	adc	r23, r1
    21a0:	81 1d       	adc	r24, r1
    21a2:	91 1d       	adc	r25, r1
    21a4:	a1 1d       	adc	r26, r1
    21a6:	20 d0       	rcall	.+64     	; 0x21e8 <__ultoa_invert+0x84>
    21a8:	09 f4       	brne	.+2      	; 0x21ac <__ultoa_invert+0x48>
    21aa:	68 94       	set
    21ac:	3f 91       	pop	r19
    21ae:	2a e0       	ldi	r18, 0x0A	; 10
    21b0:	26 9f       	mul	r18, r22
    21b2:	11 24       	eor	r1, r1
    21b4:	30 19       	sub	r19, r0
    21b6:	30 5d       	subi	r19, 0xD0	; 208
    21b8:	31 93       	st	Z+, r19
    21ba:	de f6       	brtc	.-74     	; 0x2172 <__ultoa_invert+0xe>
    21bc:	cf 01       	movw	r24, r30
    21be:	08 95       	ret
    21c0:	46 2f       	mov	r20, r22
    21c2:	47 70       	andi	r20, 0x07	; 7
    21c4:	40 5d       	subi	r20, 0xD0	; 208
    21c6:	41 93       	st	Z+, r20
    21c8:	b3 e0       	ldi	r27, 0x03	; 3
    21ca:	0f d0       	rcall	.+30     	; 0x21ea <__ultoa_invert+0x86>
    21cc:	c9 f7       	brne	.-14     	; 0x21c0 <__ultoa_invert+0x5c>
    21ce:	f6 cf       	rjmp	.-20     	; 0x21bc <__ultoa_invert+0x58>
    21d0:	46 2f       	mov	r20, r22
    21d2:	4f 70       	andi	r20, 0x0F	; 15
    21d4:	40 5d       	subi	r20, 0xD0	; 208
    21d6:	4a 33       	cpi	r20, 0x3A	; 58
    21d8:	18 f0       	brcs	.+6      	; 0x21e0 <__ultoa_invert+0x7c>
    21da:	49 5d       	subi	r20, 0xD9	; 217
    21dc:	31 fd       	sbrc	r19, 1
    21de:	40 52       	subi	r20, 0x20	; 32
    21e0:	41 93       	st	Z+, r20
    21e2:	02 d0       	rcall	.+4      	; 0x21e8 <__ultoa_invert+0x84>
    21e4:	a9 f7       	brne	.-22     	; 0x21d0 <__ultoa_invert+0x6c>
    21e6:	ea cf       	rjmp	.-44     	; 0x21bc <__ultoa_invert+0x58>
    21e8:	b4 e0       	ldi	r27, 0x04	; 4
    21ea:	a6 95       	lsr	r26
    21ec:	97 95       	ror	r25
    21ee:	87 95       	ror	r24
    21f0:	77 95       	ror	r23
    21f2:	67 95       	ror	r22
    21f4:	ba 95       	dec	r27
    21f6:	c9 f7       	brne	.-14     	; 0x21ea <__ultoa_invert+0x86>
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	61 05       	cpc	r22, r1
    21fc:	71 05       	cpc	r23, r1
    21fe:	08 95       	ret
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	0a 2e       	mov	r0, r26
    2206:	06 94       	lsr	r0
    2208:	57 95       	ror	r21
    220a:	47 95       	ror	r20
    220c:	37 95       	ror	r19
    220e:	27 95       	ror	r18
    2210:	ba 95       	dec	r27
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__ultoa_invert+0xa2>
    2214:	62 0f       	add	r22, r18
    2216:	73 1f       	adc	r23, r19
    2218:	84 1f       	adc	r24, r20
    221a:	95 1f       	adc	r25, r21
    221c:	a0 1d       	adc	r26, r0
    221e:	08 95       	ret

00002220 <eeprom_read_block>:
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22

00002224 <eeprom_read_blraw>:
    2224:	fc 01       	movw	r30, r24
    2226:	f9 99       	sbic	0x1f, 1	; 31
    2228:	fe cf       	rjmp	.-4      	; 0x2226 <eeprom_read_blraw+0x2>
    222a:	06 c0       	rjmp	.+12     	; 0x2238 <eeprom_read_blraw+0x14>
    222c:	f2 bd       	out	0x22, r31	; 34
    222e:	e1 bd       	out	0x21, r30	; 33
    2230:	f8 9a       	sbi	0x1f, 0	; 31
    2232:	31 96       	adiw	r30, 0x01	; 1
    2234:	00 b4       	in	r0, 0x20	; 32
    2236:	0d 92       	st	X+, r0
    2238:	41 50       	subi	r20, 0x01	; 1
    223a:	50 40       	sbci	r21, 0x00	; 0
    223c:	b8 f7       	brcc	.-18     	; 0x222c <eeprom_read_blraw+0x8>
    223e:	08 95       	ret

00002240 <eeprom_write_block>:
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	03 c0       	rjmp	.+6      	; 0x224c <eeprom_write_block+0xc>
    2246:	2d 91       	ld	r18, X+
    2248:	0e 94 2b 11 	call	0x2256	; 0x2256 <eeprom_write_r18>
    224c:	41 50       	subi	r20, 0x01	; 1
    224e:	50 40       	sbci	r21, 0x00	; 0
    2250:	d0 f7       	brcc	.-12     	; 0x2246 <eeprom_write_block+0x6>
    2252:	08 95       	ret

00002254 <eeprom_write_byte>:
    2254:	26 2f       	mov	r18, r22

00002256 <eeprom_write_r18>:
    2256:	f9 99       	sbic	0x1f, 1	; 31
    2258:	fe cf       	rjmp	.-4      	; 0x2256 <eeprom_write_r18>
    225a:	1f ba       	out	0x1f, r1	; 31
    225c:	92 bd       	out	0x22, r25	; 34
    225e:	81 bd       	out	0x21, r24	; 33
    2260:	20 bd       	out	0x20, r18	; 32
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	fa 9a       	sbi	0x1f, 2	; 31
    2268:	f9 9a       	sbi	0x1f, 1	; 31
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	08 95       	ret

00002270 <__prologue_saves__>:
    2270:	2f 92       	push	r2
    2272:	3f 92       	push	r3
    2274:	4f 92       	push	r4
    2276:	5f 92       	push	r5
    2278:	6f 92       	push	r6
    227a:	7f 92       	push	r7
    227c:	8f 92       	push	r8
    227e:	9f 92       	push	r9
    2280:	af 92       	push	r10
    2282:	bf 92       	push	r11
    2284:	cf 92       	push	r12
    2286:	df 92       	push	r13
    2288:	ef 92       	push	r14
    228a:	ff 92       	push	r15
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	ca 1b       	sub	r28, r26
    229a:	db 0b       	sbc	r29, r27
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	09 94       	ijmp

000022a8 <__epilogue_restores__>:
    22a8:	2a 88       	ldd	r2, Y+18	; 0x12
    22aa:	39 88       	ldd	r3, Y+17	; 0x11
    22ac:	48 88       	ldd	r4, Y+16	; 0x10
    22ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    22b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ba:	b9 84       	ldd	r11, Y+9	; 0x09
    22bc:	c8 84       	ldd	r12, Y+8	; 0x08
    22be:	df 80       	ldd	r13, Y+7	; 0x07
    22c0:	ee 80       	ldd	r14, Y+6	; 0x06
    22c2:	fd 80       	ldd	r15, Y+5	; 0x05
    22c4:	0c 81       	ldd	r16, Y+4	; 0x04
    22c6:	1b 81       	ldd	r17, Y+3	; 0x03
    22c8:	aa 81       	ldd	r26, Y+2	; 0x02
    22ca:	b9 81       	ldd	r27, Y+1	; 0x01
    22cc:	ce 0f       	add	r28, r30
    22ce:	d1 1d       	adc	r29, r1
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	ed 01       	movw	r28, r26
    22dc:	08 95       	ret

000022de <_exit>:
    22de:	f8 94       	cli

000022e0 <__stop_program>:
    22e0:	ff cf       	rjmp	.-2      	; 0x22e0 <__stop_program>
